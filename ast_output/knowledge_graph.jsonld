{
  "@context": {
    "@version": 1.1,
    "@vocab": "https://schema.org/",
    "crate": "https://w3id.org/rust/crate/",
    "dcterms": "http://purl.org/dc/terms/",
    "edge_type": "rust:edgeType",
    "edges": "rust:edges",
    "label": "rdfs:label",
    "nodes": "hasPart",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "rust": "https://w3id.org/rust/vocab#",
    "source": "rust:source",
    "target": "rust:target",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@type": "KnowledgeGraph",
  "@id": "rust_project_knowledge_graph",
  "nodes": [
    {
      "@id": "benches/zk_benchmarks.rs#create_random_test_hash",
      "@type": "rust:Function",
      "label": "create_random_test_hash",
      "crate_name": "benches"
    },
    {
      "@id": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "@type": "rust:Function",
      "label": "setup_tree_and_proofs",
      "crate_name": "benches"
    },
    {
      "@id": "benches/zk_benchmarks.rs#bench_proof_generation",
      "@type": "rust:Function",
      "label": "bench_proof_generation",
      "crate_name": "benches"
    },
    {
      "@id": "benches/zk_benchmarks.rs#bench_proof_verification",
      "@type": "rust:Function",
      "label": "bench_proof_verification",
      "crate_name": "benches"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#Args",
      "@type": "rust:Struct",
      "label": "Args",
      "crate_name": "zk_sp1-script",
      "attributes": {
        "derives": [
          "Parser",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
      "@type": "rust:Struct",
      "label": "SimulationConfig",
      "crate_name": "zk_sp1-script",
      "attributes": {
        "derives": [
          "Debug",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#SimulationResult",
      "@type": "rust:Struct",
      "label": "SimulationResult",
      "crate_name": "zk_sp1-script",
      "attributes": {
        "derives": [
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "@type": "rust:Function",
      "label": "get_random_service_id",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "@type": "rust:Function",
      "label": "_get_service_key",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "@type": "rust:Function",
      "label": "get_random_account_id",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "@type": "rust:Function",
      "label": "get_first_account_key",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "@type": "rust:Function",
      "label": "create_preparation_batch",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "@type": "rust:Function",
      "label": "create_benchmark_batch",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#main",
      "@type": "rust:Function",
      "label": "main",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "@type": "rust:Function",
      "label": "execute_simulations",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "@type": "rust:Function",
      "label": "get_configurations",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "@type": "rust:Function",
      "label": "calculate_statistics",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "@type": "rust:Function",
      "label": "plot_green_configurations",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "@type": "rust:Function",
      "label": "plot_yellow_configurations",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "@type": "rust:Function",
      "label": "plot_blue_configurations",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "@type": "rust:Function",
      "label": "plot_orange_configurations",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "@type": "rust:Function",
      "label": "plot_orange_configurations_algorithm",
      "crate_name": "zk_sp1-script"
    },
    {
      "@id": "crates/tests/src/lib.rs#setup_db",
      "@type": "rust:Function",
      "label": "setup_db",
      "crate_name": "tests"
    },
    {
      "@id": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "@type": "rust:Function",
      "label": "test_light_client_prover_talking",
      "crate_name": "tests"
    },
    {
      "@id": "crates/tests/src/lib.rs#random_algorithm",
      "@type": "rust:Function",
      "label": "random_algorithm",
      "crate_name": "tests"
    },
    {
      "@id": "crates/errors/src/lib.rs#PrismError",
      "@type": "rust:Enum",
      "label": "PrismError",
      "crate_name": "errors",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/errors/src/lib.rs#GeneralError",
      "@type": "rust:Enum",
      "label": "GeneralError",
      "crate_name": "errors",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/errors/src/lib.rs#DatabaseError",
      "@type": "rust:Enum",
      "label": "DatabaseError",
      "crate_name": "errors",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/errors/src/lib.rs#DataAvailabilityError",
      "@type": "rust:Enum",
      "label": "DataAvailabilityError",
      "crate_name": "errors",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/errors/src/lib.rs#ProofError",
      "@type": "rust:Enum",
      "label": "ProofError",
      "crate_name": "errors",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/da/src/lib.rs#celestia",
      "@type": "rust:Module",
      "label": "celestia",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/lib.rs#consts",
      "@type": "rust:Module",
      "label": "consts",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/lib.rs#memory",
      "@type": "rust:Module",
      "label": "memory",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/lib.rs#FinalizedEpoch",
      "@type": "rust:Struct",
      "label": "FinalizedEpoch",
      "crate_name": "da",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize",
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/da/src/lib.rs#LightDataAvailabilityLayer",
      "@type": "rust:Trait",
      "label": "LightDataAvailabilityLayer",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/lib.rs#DataAvailabilityLayer",
      "@type": "rust:Trait",
      "label": "DataAvailabilityLayer",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/memory.rs#Block",
      "@type": "rust:Struct",
      "label": "Block",
      "crate_name": "da",
      "attributes": {
        "derives": [
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/da/src/memory.rs#InMemoryDataAvailabilityLayer",
      "@type": "rust:Struct",
      "label": "InMemoryDataAvailabilityLayer",
      "crate_name": "da",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/da/src/celestia/full_node.rs#CelestiaConnection",
      "@type": "rust:Struct",
      "label": "CelestiaConnection",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/celestia/mod.rs#full_node",
      "@type": "rust:Module",
      "label": "full_node",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/celestia/mod.rs#light_client",
      "@type": "rust:Module",
      "label": "light_client",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/celestia/mod.rs#utils",
      "@type": "rust:Module",
      "label": "utils",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "@type": "rust:Function",
      "label": "resolve_bootnodes",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/celestia/light_client.rs#LightClientConnection",
      "@type": "rust:Struct",
      "label": "LightClientConnection",
      "crate_name": "da"
    },
    {
      "@id": "crates/da/src/celestia/utils.rs#CelestiaConfig",
      "@type": "rust:Struct",
      "label": "CelestiaConfig",
      "crate_name": "da",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/da/src/celestia/utils.rs#Network",
      "@type": "rust:Enum",
      "label": "Network",
      "crate_name": "da",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/da/src/celestia/utils.rs#NetworkConfig",
      "@type": "rust:Struct",
      "label": "NetworkConfig",
      "crate_name": "da",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/da/src/celestia/utils.rs#create_namespace",
      "@type": "rust:Function",
      "label": "create_namespace",
      "crate_name": "da"
    },
    {
      "@id": "crates/zk/sp1/src/bin/base_prover.rs#main",
      "@type": "rust:Function",
      "label": "main",
      "crate_name": "zk_sp1"
    },
    {
      "@id": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "@type": "rust:Function",
      "label": "main",
      "crate_name": "zk_sp1"
    },
    {
      "@id": "crates/common/src/operation.rs#Operation",
      "@type": "rust:Enum",
      "label": "Operation",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/operation.rs#SignatureBundle",
      "@type": "rust:Struct",
      "label": "SignatureBundle",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/operation.rs#ServiceChallengeInput",
      "@type": "rust:Enum",
      "label": "ServiceChallengeInput",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/operation.rs#ServiceChallenge",
      "@type": "rust:Enum",
      "label": "ServiceChallenge",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/transaction.rs#UnsignedTransaction",
      "@type": "rust:Struct",
      "label": "UnsignedTransaction",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq"
        ]
      }
    },
    {
      "@id": "crates/common/src/transaction.rs#Transaction",
      "@type": "rust:Struct",
      "label": "Transaction",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/transaction.rs#TransactionError",
      "@type": "rust:Enum",
      "label": "TransactionError",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/common/src/lib.rs#account",
      "@type": "rust:Module",
      "label": "account",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#api",
      "@type": "rust:Module",
      "label": "api",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#builder",
      "@type": "rust:Module",
      "label": "builder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#digest",
      "@type": "rust:Module",
      "label": "digest",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#operation",
      "@type": "rust:Module",
      "label": "operation",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#transaction",
      "@type": "rust:Module",
      "label": "transaction",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#test_transaction_builder",
      "@type": "rust:Module",
      "label": "test_transaction_builder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/lib.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "@type": "rust:Function",
      "label": "test_process_register_service_transactions",
      "crate_name": "common",
      "attributes": {
        "is_benchmark": false,
        "is_test": true
      }
    },
    {
      "@id": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "@type": "rust:Function",
      "label": "test_process_create_account_transactions",
      "crate_name": "common",
      "attributes": {
        "is_benchmark": false,
        "is_test": true
      }
    },
    {
      "@id": "crates/common/src/digest.rs#Digest",
      "@type": "rust:Struct",
      "label": "Digest",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize",
          "Deserialize",
          "PartialEq",
          "Eq",
          "Copy",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/account.rs#SignedData",
      "@type": "rust:Struct",
      "label": "SignedData",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/account.rs#Account",
      "@type": "rust:Struct",
      "label": "Account",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "Default",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/test_transaction_builder.rs#PostCommitAction",
      "@type": "rust:Enum",
      "label": "PostCommitAction",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/test_transaction_builder.rs#UncommittedTransaction",
      "@type": "rust:Struct",
      "label": "UncommittedTransaction",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/test_transaction_builder.rs#TestTransactionBuilder",
      "@type": "rust:Struct",
      "label": "TestTransactionBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/types.rs#AccountRequest",
      "@type": "rust:Struct",
      "label": "AccountRequest",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Default",
          "Debug",
          "Serialize",
          "Deserialize",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/api/types.rs#AccountResponse",
      "@type": "rust:Struct",
      "label": "AccountResponse",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Default",
          "Debug",
          "Serialize",
          "Deserialize",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/api/types.rs#CommitmentResponse",
      "@type": "rust:Struct",
      "label": "CommitmentResponse",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Default",
          "Debug",
          "Serialize",
          "Deserialize",
          "PartialEq",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/api/types.rs#HashedMerkleProof",
      "@type": "rust:Struct",
      "label": "HashedMerkleProof",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/common/src/api/mod.rs#mock",
      "@type": "rust:Module",
      "label": "mock",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mod.rs#noop",
      "@type": "rust:Module",
      "label": "noop",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mod.rs#types",
      "@type": "rust:Module",
      "label": "types",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mod.rs#PrismApiError",
      "@type": "rust:Enum",
      "label": "PrismApiError",
      "crate_name": "common",
      "attributes": {
        "derives": [
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/common/src/api/mod.rs#PrismApi",
      "@type": "rust:Trait",
      "label": "PrismApi",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mod.rs#PrismApiTimer",
      "@type": "rust:Trait",
      "label": "PrismApiTimer",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mod.rs#PendingTransaction",
      "@type": "rust:Trait",
      "label": "PendingTransaction",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mod.rs#PendingTransactionImpl",
      "@type": "rust:Struct",
      "label": "PendingTransactionImpl",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mock.rs#MockPrismTimer",
      "@type": "rust:Struct",
      "label": "MockPrismTimer",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/mock.rs#MockPrismPendingTransaction",
      "@type": "rust:Struct",
      "label": "MockPrismPendingTransaction",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/noop.rs#NoopTimer",
      "@type": "rust:Struct",
      "label": "NoopTimer",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/noop.rs#NoopPendingTransaction",
      "@type": "rust:Struct",
      "label": "NoopPendingTransaction",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/api/noop.rs#NoopPrismApi",
      "@type": "rust:Struct",
      "label": "NoopPrismApi",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/builder.rs#RequestBuilder",
      "@type": "rust:Struct",
      "label": "RequestBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/builder.rs#CreateAccountRequestBuilder",
      "@type": "rust:Struct",
      "label": "CreateAccountRequestBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/builder.rs#RegisterServiceRequestBuilder",
      "@type": "rust:Struct",
      "label": "RegisterServiceRequestBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/builder.rs#ModifyAccountRequestBuilder",
      "@type": "rust:Struct",
      "label": "ModifyAccountRequestBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/builder.rs#SigningTransactionRequestBuilder",
      "@type": "rust:Struct",
      "label": "SigningTransactionRequestBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/common/src/builder.rs#SendingTransactionRequestBuilder",
      "@type": "rust:Struct",
      "label": "SendingTransactionRequestBuilder",
      "crate_name": "common"
    },
    {
      "@id": "crates/zk/groth16/src/hashchain.rs#HashChainEntryCircuit",
      "@type": "rust:Struct",
      "label": "HashChainEntryCircuit",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/merkle_insertion.rs#InsertMerkleProofCircuit",
      "@type": "rust:Struct",
      "label": "InsertMerkleProofCircuit",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/merkle_insertion.rs#prove_insertion",
      "@type": "rust:Function",
      "label": "prove_insertion",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "@type": "rust:Function",
      "label": "prove_non_membership",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#hashchain",
      "@type": "rust:Module",
      "label": "hashchain",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#less_than",
      "@type": "rust:Module",
      "label": "less_than",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#merkle_batch",
      "@type": "rust:Module",
      "label": "merkle_batch",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#merkle_insertion",
      "@type": "rust:Module",
      "label": "merkle_insertion",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#merkle_update",
      "@type": "rust:Module",
      "label": "merkle_update",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#utils",
      "@type": "rust:Module",
      "label": "utils",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#ProofVariantCircuit",
      "@type": "rust:Enum",
      "label": "ProofVariantCircuit",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#G1",
      "@type": "rust:Struct",
      "label": "G1",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#G2",
      "@type": "rust:Struct",
      "label": "G2",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#Bls12Proof",
      "@type": "rust:Struct",
      "label": "Bls12Proof",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#VerifyingKey",
      "@type": "rust:Struct",
      "label": "VerifyingKey",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/lib.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/merkle_batch.rs#BatchMerkleProofCircuit",
      "@type": "rust:Struct",
      "label": "BatchMerkleProofCircuit",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/merkle_update.rs#UpdateMerkleProofCircuit",
      "@type": "rust:Struct",
      "label": "UpdateMerkleProofCircuit",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "@type": "rust:Function",
      "label": "prove_update",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/less_than.rs#LessThanCircuit",
      "@type": "rust:Struct",
      "label": "LessThanCircuit",
      "crate_name": "zk_groth16",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "@type": "rust:Function",
      "label": "create_and_verify_snark",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/utils.rs#unpack_and_process",
      "@type": "rust:Function",
      "label": "unpack_and_process",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "@type": "rust:Function",
      "label": "validate_epoch",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "@type": "rust:Function",
      "label": "recalculate_hash_as_scalar",
      "crate_name": "zk_groth16"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/client.rs#VerifyEpochResult",
      "@type": "rust:Struct",
      "label": "VerifyEpochResult",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/client.rs#WasmLightClient",
      "@type": "rust:Struct",
      "label": "WasmLightClient",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/error.rs#WasmLightClientError",
      "@type": "rust:Enum",
      "label": "WasmLightClientError",
      "crate_name": "node_types_wasm-lightclient",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/error.rs#WorkerError",
      "@type": "rust:Enum",
      "label": "WorkerError",
      "crate_name": "node_types_wasm-lightclient",
      "attributes": {
        "derives": [
          "Error",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/lib.rs#client",
      "@type": "rust:Module",
      "label": "client",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/lib.rs#commands",
      "@type": "rust:Module",
      "label": "commands",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/lib.rs#error",
      "@type": "rust:Module",
      "label": "error",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/lib.rs#worker",
      "@type": "rust:Module",
      "label": "worker",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/lib.rs#worker_communication",
      "@type": "rust:Module",
      "label": "worker_communication",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/worker.rs#LightClientWorker",
      "@type": "rust:Struct",
      "label": "LightClientWorker",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "@type": "rust:Function",
      "label": "initialize_event_channel",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "@type": "rust:Function",
      "label": "forward_events",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/commands.rs#LightClientCommand",
      "@type": "rust:Enum",
      "label": "LightClientCommand",
      "crate_name": "node_types_wasm-lightclient",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/commands.rs#WorkerResponse",
      "@type": "rust:Enum",
      "label": "WorkerResponse",
      "crate_name": "node_types_wasm-lightclient",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/worker_communication.rs#random_id",
      "@type": "rust:Function",
      "label": "random_id",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/worker_communication.rs#WorkerClient",
      "@type": "rust:Struct",
      "label": "WorkerClient",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/node_types/wasm-lightclient/src/worker_communication.rs#WorkerServer",
      "@type": "rust:Struct",
      "label": "WorkerServer",
      "crate_name": "node_types_wasm-lightclient"
    },
    {
      "@id": "crates/keys/src/lib.rs#algorithm",
      "@type": "rust:Module",
      "label": "algorithm",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#cosmos",
      "@type": "rust:Module",
      "label": "cosmos",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#der",
      "@type": "rust:Module",
      "label": "der",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#payload",
      "@type": "rust:Module",
      "label": "payload",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#signatures",
      "@type": "rust:Module",
      "label": "signatures",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#signing_keys",
      "@type": "rust:Module",
      "label": "signing_keys",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#verifying_keys",
      "@type": "rust:Module",
      "label": "verifying_keys",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/lib.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/tests/mod.rs#key_tests",
      "@type": "rust:Module",
      "label": "key_tests",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "@type": "rust:Enum",
      "label": "CryptoAlgorithm",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Clone",
          "Copy",
          "Debug",
          "Eq",
          "PartialEq",
          "Serialize",
          "Deserialize",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/keys/src/der.rs#SignatureInfoRef",
      "@type": "rust:Struct",
      "label": "SignatureInfoRef",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/cosmos.rs#CosmosSignDoc",
      "@type": "rust:Struct",
      "label": "CosmosSignDoc",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/keys/src/cosmos.rs#CosmosFee",
      "@type": "rust:Struct",
      "label": "CosmosFee",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/keys/src/cosmos.rs#CosmosMessage",
      "@type": "rust:Struct",
      "label": "CosmosMessage",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/keys/src/cosmos.rs#CosmosMessageValue",
      "@type": "rust:Struct",
      "label": "CosmosMessageValue",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "@type": "rust:Function",
      "label": "cosmos_adr36_hash_message",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "@type": "rust:Function",
      "label": "create_serialized_adr36_sign_doc",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/cosmos.rs#signer_from_key",
      "@type": "rust:Function",
      "label": "signer_from_key",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/signatures.rs#Signature",
      "@type": "rust:Enum",
      "label": "Signature",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize",
          "Clone",
          "Debug",
          "PartialEq",
          "Eq"
        ]
      }
    },
    {
      "@id": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "@type": "rust:Enum",
      "label": "VerifyingKey",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Clone",
          "Serialize",
          "Deserialize",
          "Debug",
          "PartialEq",
          "Eq"
        ]
      }
    },
    {
      "@id": "crates/keys/src/payload.rs#CryptoPayload",
      "@type": "rust:Struct",
      "label": "CryptoPayload",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize",
          "ToSchema"
        ]
      }
    },
    {
      "@id": "crates/keys/src/signing_keys.rs#get_rng",
      "@type": "rust:Function",
      "label": "get_rng",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/signing_keys.rs#get_rng",
      "@type": "rust:Function",
      "label": "get_rng",
      "crate_name": "keys"
    },
    {
      "@id": "crates/keys/src/signing_keys.rs#SigningKey",
      "@type": "rust:Enum",
      "label": "SigningKey",
      "crate_name": "keys",
      "attributes": {
        "derives": [
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/serde/src/base64.rs#ToBase64",
      "@type": "rust:Trait",
      "label": "ToBase64",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/base64.rs#FromBase64",
      "@type": "rust:Trait",
      "label": "FromBase64",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/lib.rs#base64",
      "@type": "rust:Module",
      "label": "base64",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/lib.rs#bech32",
      "@type": "rust:Module",
      "label": "bech32",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/lib.rs#binary",
      "@type": "rust:Module",
      "label": "binary",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/lib.rs#hex",
      "@type": "rust:Module",
      "label": "hex",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/lib.rs#raw_or_hex",
      "@type": "rust:Module",
      "label": "raw_or_hex",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/lib.rs#raw_or_b64",
      "@type": "rust:Module",
      "label": "raw_or_b64",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/bech32.rs#ToBech32",
      "@type": "rust:Trait",
      "label": "ToBech32",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/bech32.rs#FromBech32",
      "@type": "rust:Trait",
      "label": "FromBech32",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/binary.rs#ToBinary",
      "@type": "rust:Trait",
      "label": "ToBinary",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/binary.rs#FromBinary",
      "@type": "rust:Trait",
      "label": "FromBinary",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/hex.rs#ToHex",
      "@type": "rust:Trait",
      "label": "ToHex",
      "crate_name": "serde"
    },
    {
      "@id": "crates/serde/src/hex.rs#FromHex",
      "@type": "rust:Trait",
      "label": "FromHex",
      "crate_name": "serde"
    },
    {
      "@id": "crates/tree/src/lib.rs#hasher",
      "@type": "rust:Module",
      "label": "hasher",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/lib.rs#key_directory_tree",
      "@type": "rust:Module",
      "label": "key_directory_tree",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/lib.rs#proofs",
      "@type": "rust:Module",
      "label": "proofs",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/lib.rs#snarkable_tree",
      "@type": "rust:Module",
      "label": "snarkable_tree",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/lib.rs#AccountResponse",
      "@type": "rust:Enum",
      "label": "AccountResponse",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/tree/src/lib.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "@type": "rust:Function",
      "label": "test_insert_and_get",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "@type": "rust:Function",
      "label": "test_insert_for_nonexistent_service_fails",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "@type": "rust:Function",
      "label": "test_insert_with_invalid_service_challenge_fails",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "@type": "rust:Function",
      "label": "test_insert_duplicate_key",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "@type": "rust:Function",
      "label": "test_update_existing_key",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "@type": "rust:Function",
      "label": "test_update_non_existing_key",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_data_ops",
      "@type": "rust:Function",
      "label": "test_data_ops",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "@type": "rust:Function",
      "label": "test_multiple_inserts_and_updates",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "@type": "rust:Function",
      "label": "test_interleaved_inserts_and_updates",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "@type": "rust:Function",
      "label": "test_root_hash_changes",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "@type": "rust:Function",
      "label": "test_batch_writing",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "@type": "rust:Function",
      "label": "test_get_non_existing_key",
      "crate_name": "tree",
      "attributes": {
        "is_benchmark": false,
        "is_test": true
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#Batch",
      "@type": "rust:Struct",
      "label": "Batch",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#ServiceProof",
      "@type": "rust:Struct",
      "label": "ServiceProof",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#Proof",
      "@type": "rust:Enum",
      "label": "Proof",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#InsertProof",
      "@type": "rust:Struct",
      "label": "InsertProof",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#UpdateProof",
      "@type": "rust:Struct",
      "label": "UpdateProof",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#MerkleProof",
      "@type": "rust:Struct",
      "label": "MerkleProof",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/tree/src/proofs.rs#HashedMerkleProof",
      "@type": "rust:Struct",
      "label": "HashedMerkleProof",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/tree/src/snarkable_tree.rs#SnarkableTree",
      "@type": "rust:Trait",
      "label": "SnarkableTree",
      "crate_name": "tree"
    },
    {
      "@id": "crates/tree/src/hasher.rs#TreeHasher",
      "@type": "rust:Struct",
      "label": "TreeHasher",
      "crate_name": "tree",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Default"
        ]
      }
    },
    {
      "@id": "crates/tree/src/key_directory_tree.rs#KeyDirectoryTree",
      "@type": "rust:Struct",
      "label": "KeyDirectoryTree",
      "crate_name": "tree"
    },
    {
      "@id": "crates/cli/src/lib.rs#cfg",
      "@type": "rust:Module",
      "label": "cfg",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/lib.rs#node_types",
      "@type": "rust:Module",
      "label": "node_types",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#Commands",
      "@type": "rust:Enum",
      "label": "Commands",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Clone",
          "Debug",
          "Subcommand",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#CommandArgs",
      "@type": "rust:Struct",
      "label": "CommandArgs",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Args",
          "Deserialize",
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#Cli",
      "@type": "rust:Struct",
      "label": "Cli",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Parser",
          "Clone",
          "Debug",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#CelestiaArgs",
      "@type": "rust:Struct",
      "label": "CelestiaArgs",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Args",
          "Deserialize",
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#WebserverArgs",
      "@type": "rust:Struct",
      "label": "WebserverArgs",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Args",
          "Deserialize",
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#Config",
      "@type": "rust:Struct",
      "label": "Config",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#DALayerOption",
      "@type": "rust:Enum",
      "label": "DALayerOption",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Debug",
          "Default",
          "Clone",
          "Eq",
          "PartialEq",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#DBValues",
      "@type": "rust:Enum",
      "label": "DBValues",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Debug",
          "Default",
          "Clone",
          "Eq",
          "PartialEq",
          "Serialize",
          "Deserialize",
          "ValueEnum"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#DatabaseArgs",
      "@type": "rust:Struct",
      "label": "DatabaseArgs",
      "crate_name": "cli",
      "attributes": {
        "derives": [
          "Args",
          "Deserialize",
          "Clone",
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/cli/src/cfg.rs#load_config",
      "@type": "rust:Function",
      "label": "load_config",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#get_prism_home",
      "@type": "rust:Function",
      "label": "get_prism_home",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "@type": "rust:Function",
      "label": "ensure_config_file_exists",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#apply_command_line_args",
      "@type": "rust:Function",
      "label": "apply_command_line_args",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#initialize_db",
      "@type": "rust:Function",
      "label": "initialize_db",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#initialize_da_layer",
      "@type": "rust:Function",
      "label": "initialize_da_layer",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "@type": "rust:Function",
      "label": "initialize_light_da_layer",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/main.rs#cfg",
      "@type": "rust:Module",
      "label": "cfg",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/main.rs#node_types",
      "@type": "rust:Module",
      "label": "node_types",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/main.rs#main",
      "@type": "rust:Function",
      "label": "main",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/main.rs#get_signing_key",
      "@type": "rust:Function",
      "label": "get_signing_key",
      "crate_name": "cli"
    },
    {
      "@id": "crates/cli/src/node_types.rs#NodeType",
      "@type": "rust:Trait",
      "label": "NodeType",
      "crate_name": "cli"
    },
    {
      "@id": "crates/telemetry/src/metrics_registry.rs#PrismMetrics",
      "@type": "rust:Struct",
      "label": "PrismMetrics",
      "crate_name": "telemetry",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "@type": "rust:Function",
      "label": "init_metrics_registry",
      "crate_name": "telemetry"
    },
    {
      "@id": "crates/telemetry/src/metrics_registry.rs#get_metrics",
      "@type": "rust:Function",
      "label": "get_metrics",
      "crate_name": "telemetry"
    },
    {
      "@id": "crates/telemetry/src/lib.rs#init",
      "@type": "rust:Module",
      "label": "init",
      "crate_name": "telemetry"
    },
    {
      "@id": "crates/telemetry/src/lib.rs#metrics_registry",
      "@type": "rust:Module",
      "label": "metrics_registry",
      "crate_name": "telemetry"
    },
    {
      "@id": "crates/telemetry/src/init.rs#init",
      "@type": "rust:Function",
      "label": "init",
      "crate_name": "telemetry"
    },
    {
      "@id": "crates/node_types/lightclient/src/lightclient.rs#spawn_task",
      "@type": "rust:Function",
      "label": "spawn_task",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/lightclient/src/lightclient.rs#spawn_task",
      "@type": "rust:Function",
      "label": "spawn_task",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/lightclient/src/lightclient.rs#VerificationKeys",
      "@type": "rust:Struct",
      "label": "VerificationKeys",
      "crate_name": "node_types_lightclient",
      "attributes": {
        "derives": [
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/node_types/lightclient/src/lightclient.rs#load_sp1_verifying_keys",
      "@type": "rust:Function",
      "label": "load_sp1_verifying_keys",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/lightclient/src/lightclient.rs#LightClient",
      "@type": "rust:Struct",
      "label": "LightClient",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/lightclient/src/lightclient.rs#SyncState",
      "@type": "rust:Struct",
      "label": "SyncState",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/lightclient/src/events.rs#LightClientEvent",
      "@type": "rust:Enum",
      "label": "LightClientEvent",
      "crate_name": "node_types_lightclient",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize"
        ]
      }
    },
    {
      "@id": "crates/node_types/lightclient/src/events.rs#EventInfo",
      "@type": "rust:Struct",
      "label": "EventInfo",
      "crate_name": "node_types_lightclient",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Serialize"
        ]
      }
    },
    {
      "@id": "crates/node_types/lightclient/src/events.rs#EventChannel",
      "@type": "rust:Struct",
      "label": "EventChannel",
      "crate_name": "node_types_lightclient",
      "attributes": {
        "derives": [
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/node_types/lightclient/src/events.rs#EventPublisher",
      "@type": "rust:Struct",
      "label": "EventPublisher",
      "crate_name": "node_types_lightclient",
      "attributes": {
        "derives": [
          "Debug",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/lightclient/src/events.rs#EventSubscriber",
      "@type": "rust:Struct",
      "label": "EventSubscriber",
      "crate_name": "node_types_lightclient",
      "attributes": {
        "derives": [
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/node_types/lightclient/src/lib.rs#events",
      "@type": "rust:Module",
      "label": "events",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/lightclient/src/lib.rs#lightclient",
      "@type": "rust:Module",
      "label": "lightclient",
      "crate_name": "node_types_lightclient"
    },
    {
      "@id": "crates/node_types/uniffi-lightclient/src/types.rs#UniffiLightClientEvent",
      "@type": "rust:Enum",
      "label": "UniffiLightClientEvent",
      "crate_name": "node_types_uniffi-lightclient",
      "attributes": {
        "derives": [
          "uniffi",
          "Enum"
        ]
      }
    },
    {
      "@id": "crates/node_types/uniffi-lightclient/src/bin/uniffi-bindgen.rs#main",
      "@type": "rust:Function",
      "label": "main",
      "crate_name": "node_types_uniffi-lightclient"
    },
    {
      "@id": "crates/node_types/uniffi-lightclient/src/error.rs#LightClientError",
      "@type": "rust:Enum",
      "label": "LightClientError",
      "crate_name": "node_types_uniffi-lightclient",
      "attributes": {
        "derives": [
          "Error",
          "Debug",
          "uniffi",
          "Error"
        ]
      }
    },
    {
      "@id": "crates/node_types/uniffi-lightclient/src/lib.rs#error",
      "@type": "rust:Module",
      "label": "error",
      "crate_name": "node_types_uniffi-lightclient"
    },
    {
      "@id": "crates/node_types/uniffi-lightclient/src/lib.rs#types",
      "@type": "rust:Module",
      "label": "types",
      "crate_name": "node_types_uniffi-lightclient"
    },
    {
      "@id": "crates/node_types/uniffi-lightclient/src/lib.rs#LightClient",
      "@type": "rust:Struct",
      "label": "LightClient",
      "crate_name": "node_types_uniffi-lightclient",
      "attributes": {
        "derives": [
          "Object"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/tx_buffer.rs#TxBuffer",
      "@type": "rust:Struct",
      "label": "TxBuffer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/webserver.rs#WebServerConfig",
      "@type": "rust:Struct",
      "label": "WebServerConfig",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/webserver.rs#WebServer",
      "@type": "rust:Struct",
      "label": "WebServer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/webserver.rs#ApiDoc",
      "@type": "rust:Struct",
      "label": "ApiDoc",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "OpenApi"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/webserver.rs#post_transaction",
      "@type": "rust:Function",
      "label": "post_transaction",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/webserver.rs#get_account",
      "@type": "rust:Function",
      "label": "get_account",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "@type": "rust:Function",
      "label": "get_commitment",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/lib.rs#prover",
      "@type": "rust:Module",
      "label": "prover",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/lib.rs#prover_engine",
      "@type": "rust:Module",
      "label": "prover_engine",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/lib.rs#sequencer",
      "@type": "rust:Module",
      "label": "sequencer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/lib.rs#syncer",
      "@type": "rust:Module",
      "label": "syncer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/lib.rs#tx_buffer",
      "@type": "rust:Module",
      "label": "tx_buffer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/lib.rs#webserver",
      "@type": "rust:Module",
      "label": "webserver",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/sequencer.rs#Sequencer",
      "@type": "rust:Struct",
      "label": "Sequencer",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/syncer.rs#Syncer",
      "@type": "rust:Struct",
      "label": "Syncer",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/prover/timer.rs#ProverTokioTimer",
      "@type": "rust:Struct",
      "label": "ProverTokioTimer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "@type": "rust:Function",
      "label": "create_test_prover",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "@type": "rust:Function",
      "label": "create_mock_transactions",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "@type": "rust:Function",
      "label": "test_posts_epoch_after_max_gap",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "@type": "rust:Function",
      "label": "test_validate_and_queue_update",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "@type": "rust:Function",
      "label": "test_process_transactions",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "@type": "rust:Function",
      "label": "test_execute_block_with_invalid_tx",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block",
      "@type": "rust:Function",
      "label": "test_execute_block",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "@type": "rust:Function",
      "label": "test_finalize_new_epoch",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "@type": "rust:Function",
      "label": "test_restart_sync_from_scratch",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "@type": "rust:Function",
      "label": "test_prover_fullnode_commitment_sync_with_racing_transactions",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "@type": "rust:Function",
      "label": "test_load_persisted_state",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#timer",
      "@type": "rust:Module",
      "label": "timer",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#SyncerConfig",
      "@type": "rust:Struct",
      "label": "SyncerConfig",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#SequencerConfig",
      "@type": "rust:Struct",
      "label": "SequencerConfig",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#ProverEngineConfig",
      "@type": "rust:Struct",
      "label": "ProverEngineConfig",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#Config",
      "@type": "rust:Struct",
      "label": "Config",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#Prover",
      "@type": "rust:Struct",
      "label": "Prover",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover/mod.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "node_types_prover"
    },
    {
      "@id": "crates/node_types/prover/src/prover_engine.rs#ProverEngine",
      "@type": "rust:Struct",
      "label": "ProverEngine",
      "crate_name": "node_types_prover",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/nova/src/batch.rs#EpochCircuitSequence",
      "@type": "rust:Struct",
      "label": "EpochCircuitSequence",
      "crate_name": "zk_nova",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/nova/src/batch.rs#EpochCircuit",
      "@type": "rust:Enum",
      "label": "EpochCircuit",
      "crate_name": "zk_nova",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/nova/src/batch.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/lib.rs#batch",
      "@type": "rust:Module",
      "label": "batch",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/lib.rs#insert",
      "@type": "rust:Module",
      "label": "insert",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/lib.rs#update",
      "@type": "rust:Module",
      "label": "update",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/lib.rs#utils",
      "@type": "rust:Module",
      "label": "utils",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/update.rs#UpdateCircuit",
      "@type": "rust:Struct",
      "label": "UpdateCircuit",
      "crate_name": "zk_nova",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/nova/src/insert.rs#InsertCircuit",
      "@type": "rust:Struct",
      "label": "InsertCircuit",
      "crate_name": "zk_nova",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#Digest",
      "@type": "rust:Struct",
      "label": "Digest",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "@type": "rust:Function",
      "label": "next_rom_index_and_pc",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "@type": "rust:Function",
      "label": "get_selector_vec_from_index",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#create_pp",
      "@type": "rust:Function",
      "label": "create_pp",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "@type": "rust:Function",
      "label": "allocate_bits_to_binary_number",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#hash_node",
      "@type": "rust:Function",
      "label": "hash_node",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "@type": "rust:Function",
      "label": "verify_membership_proof",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "@type": "rust:Function",
      "label": "conditionally_swap",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "@type": "rust:Function",
      "label": "conditionally_select_vector",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "@type": "rust:Function",
      "label": "boolvec_to_bytes",
      "crate_name": "zk_nova"
    },
    {
      "@id": "crates/client/src/lib.rs#http_client",
      "@type": "rust:Module",
      "label": "http_client",
      "crate_name": "client"
    },
    {
      "@id": "crates/client/src/lib.rs#prism_api",
      "@type": "rust:Module",
      "label": "prism_api",
      "crate_name": "client"
    },
    {
      "@id": "crates/client/src/prism_api.rs#PrismHttpTokioTimer",
      "@type": "rust:Struct",
      "label": "PrismHttpTokioTimer",
      "crate_name": "client"
    },
    {
      "@id": "crates/client/src/http_client.rs#PrismHttpClient",
      "@type": "rust:Struct",
      "label": "PrismHttpClient",
      "crate_name": "client"
    },
    {
      "@id": "crates/client/src/http_client.rs#PrismHttpClientError",
      "@type": "rust:Enum",
      "label": "PrismHttpClientError",
      "crate_name": "client",
      "attributes": {
        "derives": [
          "Debug"
        ]
      }
    },
    {
      "@id": "crates/storage/src/inmemory.rs#InMemoryDatabase",
      "@type": "rust:Struct",
      "label": "InMemoryDatabase",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/database.rs#StorageBackend",
      "@type": "rust:Enum",
      "label": "StorageBackend",
      "crate_name": "storage",
      "attributes": {
        "derives": [
          "Debug",
          "Clone",
          "Eq",
          "PartialEq",
          "Serialize",
          "Deserialize"
        ]
      }
    },
    {
      "@id": "crates/storage/src/database.rs#Database",
      "@type": "rust:Trait",
      "label": "Database",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/database.rs#convert_to_connection_error",
      "@type": "rust:Function",
      "label": "convert_to_connection_error",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/lib.rs#database",
      "@type": "rust:Module",
      "label": "database",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/lib.rs#inmemory",
      "@type": "rust:Module",
      "label": "inmemory",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/lib.rs#redis",
      "@type": "rust:Module",
      "label": "redis",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/lib.rs#rocksdb",
      "@type": "rust:Module",
      "label": "rocksdb",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/lib.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/tests/mod.rs#setup_db",
      "@type": "rust:Function",
      "label": "setup_db",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "@type": "rust:Function",
      "label": "test_rw_commitment",
      "crate_name": "storage",
      "attributes": {
        "is_benchmark": false,
        "is_test": true
      }
    },
    {
      "@id": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "@type": "rust:Function",
      "label": "test_write_and_read_value",
      "crate_name": "storage",
      "attributes": {
        "is_benchmark": false,
        "is_test": true
      }
    },
    {
      "@id": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "@type": "rust:Function",
      "label": "test_get_value_option_with_multiple_versions",
      "crate_name": "storage",
      "attributes": {
        "is_benchmark": false,
        "is_test": true
      }
    },
    {
      "@id": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "@type": "rust:Struct",
      "label": "RocksDBConfig",
      "crate_name": "storage",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone",
          "PartialEq",
          "Eq"
        ]
      }
    },
    {
      "@id": "crates/storage/src/rocksdb.rs#RocksDBConnection",
      "@type": "rust:Struct",
      "label": "RocksDBConnection",
      "crate_name": "storage",
      "attributes": {
        "derives": [
          "Clone"
        ]
      }
    },
    {
      "@id": "crates/storage/src/rocksdb.rs#tests",
      "@type": "rust:Module",
      "label": "tests",
      "crate_name": "storage"
    },
    {
      "@id": "crates/storage/src/redis.rs#RedisConfig",
      "@type": "rust:Struct",
      "label": "RedisConfig",
      "crate_name": "storage",
      "attributes": {
        "derives": [
          "Debug",
          "Serialize",
          "Deserialize",
          "Clone",
          "PartialEq",
          "Eq"
        ]
      }
    },
    {
      "@id": "crates/storage/src/redis.rs#RedisConnection",
      "@type": "rust:Struct",
      "label": "RedisConnection",
      "crate_name": "storage"
    }
  ],
  "edges": [
    {
      "@id": "edge_1",
      "source": "benches/zk_benchmarks.rs",
      "target": "criterion :: { black_box , criterion_group , criterion_main , BenchmarkId , Criterion }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2",
      "source": "benches/zk_benchmarks.rs",
      "target": "indexed_merkle_tree :: { node :: Node , sha256_mod , tree :: { IndexedMerkleTree , Proof } , Hash , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_3",
      "source": "benches/zk_benchmarks.rs",
      "target": "rand :: Rng",
      "edge_type": "Import"
    },
    {
      "@id": "edge_4",
      "source": "benches/zk_benchmarks.rs",
      "target": "std :: time :: Duration",
      "edge_type": "Import"
    },
    {
      "@id": "edge_5",
      "source": "benches/zk_benchmarks.rs#create_random_test_hash",
      "target": "rand::thread_rng",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_6",
      "source": "benches/zk_benchmarks.rs#create_random_test_hash",
      "target": "gen",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_7",
      "source": "benches/zk_benchmarks.rs#create_random_test_hash",
      "target": "sha256_mod",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_8",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_9",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "IndexedMerkleTree::new_with_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_10",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_11",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_12",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "Vec::with_capacity",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_13",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "Node::new_leaf",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_14",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "benches/zk_benchmarks.rs#create_random_test_hash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_15",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "benches/zk_benchmarks.rs#create_random_test_hash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_16",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "benches/zk_benchmarks.rs#create_random_test_hash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_17",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_18",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "insert_node",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_19",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_20",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "Proof::Insert",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_21",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_22",
      "source": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_23",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "benchmark_group",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_24",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "sample_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_25",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "measurement_time",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_26",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_27",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "warm_up_time",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_28",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_29",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_30",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_31",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "bench_with_input",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_32",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "BenchmarkId::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_33",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_34",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_35",
      "source": "benches/zk_benchmarks.rs#bench_proof_generation",
      "target": "finish",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_36",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "benchmark_group",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_37",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "sample_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_38",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "measurement_time",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_39",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_40",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "warm_up_time",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_41",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_42",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_43",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_44",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "bench_with_input",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_45",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "BenchmarkId::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_46",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "benches/zk_benchmarks.rs#setup_tree_and_proofs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_47",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_48",
      "source": "benches/zk_benchmarks.rs#bench_proof_verification",
      "target": "finish",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_49",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "clap :: Parser",
      "edge_type": "Import"
    },
    {
      "@id": "edge_50",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "core :: panic",
      "edge_type": "Import"
    },
    {
      "@id": "edge_51",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "jmt :: mock :: MockTreeStore",
      "edge_type": "Import"
    },
    {
      "@id": "edge_52",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "plotters :: prelude :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_53",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "prism_common :: test_transaction_builder :: TestTransactionBuilder",
      "edge_type": "Import"
    },
    {
      "@id": "edge_54",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_55",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "prism_tree :: { key_directory_tree :: KeyDirectoryTree , proofs :: Batch , snarkable_tree :: SnarkableTree , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_56",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "rand :: Rng",
      "edge_type": "Import"
    },
    {
      "@id": "edge_57",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "sha2 :: { Digest , Sha256 , Sha512 }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_58",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "sp1_sdk :: { HashableKey , Prover , ProverClient , SP1Proof , SP1Stdin }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_59",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "std :: { sync :: Arc , time :: Instant }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_60",
      "source": "crates/zk/sp1-script/src/main.rs",
      "target": "tokio :: { self , task }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_61",
      "source": "crates/zk/sp1-script/src/main.rs#Args",
      "target": "trait:Parser",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_62",
      "source": "crates/zk/sp1-script/src/main.rs#Args",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_63",
      "source": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_64",
      "source": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_65",
      "source": "crates/zk/sp1-script/src/main.rs#impl_Default_SimulationConfig",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_66",
      "source": "crates/zk/sp1-script/src/main.rs#SimulationResult",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_67",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_68",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "get_service_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_69",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_70",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "nth",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_71",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_72",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "gen_range",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_73",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_74",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_75",
      "source": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_76",
      "source": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "target": "get_service_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_77",
      "source": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_78",
      "source": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_79",
      "source": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_80",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_81",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "get_account_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_82",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_83",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "nth",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_84",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_85",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "gen_range",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_86",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_87",
      "source": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_88",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_89",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "get_account_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_90",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_91",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_92",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_93",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_94",
      "source": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "target": "first",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_95",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "Vec::with_capacity",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_96",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "rand::thread_rng",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_97",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_98",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_99",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_100",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_101",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_102",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_103",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_104",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_105",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_106",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_107",
      "source": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "target": "process_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_108",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "Vec::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_109",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "rand::thread_rng",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_110",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_111",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "get_service_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_112",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_113",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_114",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_115",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_116",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_117",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_118",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_119",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_120",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_121",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_122",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_123",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_124",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "add_random_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_125",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_126",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_127",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_128",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_129",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "revoke_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_130",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_131",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_132",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_133",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_134",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_135",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "Sha512::digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_136",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_137",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "add_internally_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_138",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_139",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_140",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_141",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "Sha512::digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_142",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_143",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "set_internally_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_144",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_145",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_146",
      "source": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "target": "process_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_147",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "sp1_sdk::utils::setup_logger",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_148",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "Args::parse",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_149",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "std::process::exit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_150",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_151",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_152",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "cuda",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_153",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "ProverClient::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_154",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "SP1Stdin::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_155",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_156",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_157",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_158",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_159",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_160",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "write",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_161",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "setup",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_162",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "Instant::now",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_163",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_164",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_165",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "compressed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_166",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "prove",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_167",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_168",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_169",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "groth16",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_170",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "prove",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_171",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "elapsed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_172",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_173",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "verify",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_174",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_175",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "verify",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_176",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "SP1Stdin::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_177",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_178",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "hash_u32",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_179",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "write_proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_180",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "write_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_181",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_182",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "write",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_183",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_184",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "std::process::exit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_185",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "write",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_186",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "setup",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_187",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "Instant::now",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_188",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_189",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_190",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "compressed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_191",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "prove",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_192",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_193",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_194",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "groth16",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_195",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "prove",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_196",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "elapsed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_197",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_198",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "verify",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_199",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_200",
      "source": "crates/zk/sp1-script/src/main.rs#main",
      "target": "verify",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_201",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "SimulationConfig::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_202",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_203",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "Vec::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_204",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "contains",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_205",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "Vec::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_206",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_207",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_208",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "task::spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_209",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "ProverClient::from_env",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_210",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_211",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_212",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_213",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_214",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_215",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "SP1Stdin::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_216",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "write",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_217",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_218",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "SP1Stdin::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_219",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "write",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_220",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_221",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "task::spawn_blocking",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_222",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_223",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_224",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "execute",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_225",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "total_instruction_count",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_226",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_227",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_228",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "into_iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_229",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "futures::future::join_all",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_230",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_231",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_232",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_233",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_234",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_235",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_236",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_237",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_238",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_239",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_240",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_241",
      "source": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "target": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_242",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "Vec::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_243",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_244",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_245",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_246",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_247",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_248",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_249",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_250",
      "source": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_251",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_252",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "min",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_253",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_254",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_255",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "max",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_256",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_257",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "sum",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_258",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_259",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "to_owned",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_260",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "sort",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_261",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "sum",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_262",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_263",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_264",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "powi",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_265",
      "source": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "target": "sqrt",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_266",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_267",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "filter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_268",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_269",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "contains",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_270",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_271",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_272",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_273",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "into_drawing_area",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_274",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "BitMapBackend::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_275",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "fill",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_276",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_277",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_278",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_279",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_280",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_281",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_282",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_283",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_284",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_285",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_286",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_287",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_288",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_289",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "min",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_290",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_291",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_292",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "max",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_293",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_294",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_295",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "min",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_296",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "cloned",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_297",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_298",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_299",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "max",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_300",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "cloned",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_301",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_302",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "build_cartesian_2d",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_303",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "y_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_304",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "x_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_305",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "margin",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_306",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "caption",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_307",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "ChartBuilder::on",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_308",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_309",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "y_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_310",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "y_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_311",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "x_label_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_312",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "x_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_313",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "x_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_314",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "configure_mesh",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_315",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "legend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_316",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_317",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_318",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_319",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "LineSeries::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_320",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_321",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_322",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_323",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_324",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "PathElement::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_325",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_326",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_327",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_328",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_329",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_330",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "Circle::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_331",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "filled",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_332",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "legend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_333",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_334",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_335",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_336",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "LineSeries::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_337",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_338",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_339",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_340",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_341",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "PathElement::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_342",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "legend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_343",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_344",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_345",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_346",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "LineSeries::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_347",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_348",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_349",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_350",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_351",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "PathElement::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_352",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_353",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_354",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "position",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_355",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "border_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_356",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "background_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_357",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "configure_series_labels",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_358",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_359",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_360",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "present",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_361",
      "source": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_362",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_363",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "filter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_364",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_365",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "contains",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_366",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_367",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_368",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_369",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "into_drawing_area",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_370",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "BitMapBackend::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_371",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "fill",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_372",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_373",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_374",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_375",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_376",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "first",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_377",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_378",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_379",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_380",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "fold",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_381",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "cloned",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_382",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_383",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_384",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "build_cartesian_2d",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_385",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "y_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_386",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "x_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_387",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "margin",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_388",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "caption",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_389",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "ChartBuilder::on",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_390",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "into_segmented",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_391",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_392",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "y_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_393",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "y_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_394",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "x_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_395",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "x_labels",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_396",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "x_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_397",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "configure_mesh",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_398",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_399",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_400",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "legend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_401",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_402",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_403",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "data",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_404",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_405",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "Histogram::vertical",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_406",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "filled",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_407",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_408",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_409",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_410",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_411",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "PathElement::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_412",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_413",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_414",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "position",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_415",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "border_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_416",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "background_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_417",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "configure_series_labels",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_418",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_419",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_420",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "present",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_421",
      "source": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_422",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_423",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "filter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_424",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_425",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "contains",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_426",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_427",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_428",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_429",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "into_drawing_area",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_430",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "BitMapBackend::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_431",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "fill",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_432",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_433",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_434",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_435",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_436",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_437",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "max",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_438",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_439",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "build_cartesian_2d",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_440",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "y_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_441",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "x_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_442",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "margin",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_443",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "caption",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_444",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "ChartBuilder::on",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_445",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "into_segmented",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_446",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_447",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "y_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_448",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "y_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_449",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "x_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_450",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "x_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_451",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "configure_mesh",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_452",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_453",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_454",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "legend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_455",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_456",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_457",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "data",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_458",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_459",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "Histogram::vertical",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_460",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "filled",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_461",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_462",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_463",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_464",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_465",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "PathElement::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_466",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_467",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_468",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "position",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_469",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "border_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_470",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "background_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_471",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "configure_series_labels",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_472",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_473",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_474",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "present",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_475",
      "source": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_476",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_477",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "filter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_478",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_479",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "contains",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_480",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_481",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_482",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_483",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_484",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "cloned",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_485",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "filter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_486",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_487",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "contains",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_488",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_489",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_490",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "into_drawing_area",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_491",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "BitMapBackend::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_492",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "fill",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_493",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_494",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_495",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_496",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_497",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_498",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "max",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_499",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_500",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "build_cartesian_2d",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_501",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "y_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_502",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "x_label_area_size",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_503",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "margin",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_504",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "caption",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_505",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "ChartBuilder::on",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_506",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "into_segmented",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_507",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_508",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "y_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_509",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "y_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_510",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "x_label_formatter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_511",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "x_desc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_512",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "configure_mesh",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_513",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_514",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_515",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "legend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_516",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_517",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "draw_series",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_518",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "data",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_519",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_520",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "Histogram::vertical",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_521",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "filled",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_522",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_523",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_524",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_525",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_526",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "PathElement::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_527",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_528",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "draw",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_529",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "position",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_530",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "border_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_531",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "background_style",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_532",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "configure_series_labels",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_533",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "mix",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_534",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_535",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "present",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_536",
      "source": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_537",
      "source": "crates/tests/src/lib.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_538",
      "source": "crates/tests/src/lib.rs",
      "target": "prism_common :: test_transaction_builder :: TestTransactionBuilder",
      "edge_type": "Import"
    },
    {
      "@id": "edge_539",
      "source": "crates/tests/src/lib.rs",
      "target": "prism_da :: { DataAvailabilityLayer , celestia :: { full_node :: CelestiaConnection as FullNodeCelestiaConn , light_client :: LightClientConnection as LightClientCelestiaConn , utils :: { CelestiaConfig , NetworkConfig } , } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_540",
      "source": "crates/tests/src/lib.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_541",
      "source": "crates/tests/src/lib.rs",
      "target": "prism_lightclient :: { LightClient , events :: EventChannel }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_542",
      "source": "crates/tests/src/lib.rs",
      "target": "prism_prover :: Prover",
      "edge_type": "Import"
    },
    {
      "@id": "edge_543",
      "source": "crates/tests/src/lib.rs",
      "target": "prism_storage :: { Database , rocksdb :: { RocksDBConfig , RocksDBConnection } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_544",
      "source": "crates/tests/src/lib.rs",
      "target": "rand :: { Rng , SeedableRng , rngs :: StdRng }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_545",
      "source": "crates/tests/src/lib.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_546",
      "source": "crates/tests/src/lib.rs",
      "target": "tokio :: { spawn , sync :: mpsc , time :: Duration }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_547",
      "source": "crates/tests/src/lib.rs",
      "target": "tempfile :: TempDir",
      "edge_type": "Import"
    },
    {
      "@id": "edge_548",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_549",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "TempDir::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_550",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "RocksDBConfig::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_551",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_552",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "to_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_553",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "path",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_554",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_555",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "RocksDBConnection::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_556",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_557",
      "source": "crates/tests/src/lib.rs#setup_db",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_558",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "crates/telemetry/src/init.rs#init",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_559",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_560",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_561",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_562",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_563",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_564",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_565",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_566",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_567",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_568",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_569",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_module",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_570",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "filter_level",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_571",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "pretty_env_logger::formatted_builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_572",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_573",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "CelestiaConfig::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_574",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_575",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_576",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "CelestiaConfig::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_577",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "NetworkConfig::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_578",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "StdRng::from_entropy",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_579",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "crates/tests/src/lib.rs#random_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_580",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_581",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_582",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "FullNodeCelestiaConn::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_583",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_584",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_585",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "LightClientCelestiaConn::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_586",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "crates/tests/src/lib.rs#setup_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_587",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_588",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_589",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_590",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_591",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "prism_prover::WebServerConfig::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_592",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_593",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_594",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_595",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_596",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "tokio_util::sync::CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_597",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "EventChannel::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_598",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "mpsc::channel",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_599",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_600",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "LightClient::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_601",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_602",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_603",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "publisher",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_604",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_605",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_606",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_607",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_608",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_609",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_610",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_611",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_612",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_613",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_614",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_615",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_616",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_617",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_618",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_619",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Vec::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_620",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "is_ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_621",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "try_recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_622",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "gen_range",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_623",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_624",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_625",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "crates/tests/src/lib.rs#random_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_626",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "as_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_627",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_628",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_629",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_630",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_631",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "map_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_632",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_633",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "gen_range",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_634",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_635",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "as_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_636",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "crates/tests/src/lib.rs#random_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_637",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "gen_range",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_638",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_639",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "add_random_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_640",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_641",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "add_randomly_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_642",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_643",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_644",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "set_randomly_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_645",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_646",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_647",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_648",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_649",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_650",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_651",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "subscribe_to_heights",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_652",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_653",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_654",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_655",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_656",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "send",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_657",
      "source": "crates/tests/src/lib.rs#test_light_client_prover_talking",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_658",
      "source": "crates/tests/src/lib.rs#random_algorithm",
      "target": "gen_range",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_659",
      "source": "crates/errors/src/lib.rs",
      "target": "anyhow :: Error as AnyhowError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_660",
      "source": "crates/errors/src/lib.rs",
      "target": "thiserror :: Error",
      "edge_type": "Import"
    },
    {
      "@id": "edge_661",
      "source": "crates/errors/src/lib.rs#PrismError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_662",
      "source": "crates/errors/src/lib.rs#PrismError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_663",
      "source": "crates/errors/src/lib.rs#GeneralError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_664",
      "source": "crates/errors/src/lib.rs#GeneralError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_665",
      "source": "crates/errors/src/lib.rs#DatabaseError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_666",
      "source": "crates/errors/src/lib.rs#DatabaseError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_667",
      "source": "crates/errors/src/lib.rs#DataAvailabilityError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_668",
      "source": "crates/errors/src/lib.rs#DataAvailabilityError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_669",
      "source": "crates/errors/src/lib.rs#ProofError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_670",
      "source": "crates/errors/src/lib.rs#ProofError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_671",
      "source": "crates/da/src/consts.rs",
      "target": "std :: time :: Duration",
      "edge_type": "Import"
    },
    {
      "@id": "edge_672",
      "source": "crates/da/src/lib.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_673",
      "source": "crates/da/src/lib.rs",
      "target": "anyhow :: { Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_674",
      "source": "crates/da/src/lib.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_675",
      "source": "crates/da/src/lib.rs",
      "target": "celestia_types :: Blob",
      "edge_type": "Import"
    },
    {
      "@id": "edge_676",
      "source": "crates/da/src/lib.rs",
      "target": "lumina_node :: events :: EventSubscriber",
      "edge_type": "Import"
    },
    {
      "@id": "edge_677",
      "source": "crates/da/src/lib.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_678",
      "source": "crates/da/src/lib.rs",
      "target": "prism_keys :: { Signature , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_679",
      "source": "crates/da/src/lib.rs",
      "target": "prism_serde :: { binary :: { FromBinary , ToBinary } , hex :: { FromHex , ToHex } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_680",
      "source": "crates/da/src/lib.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_681",
      "source": "crates/da/src/lib.rs",
      "target": "tokio :: sync :: Mutex",
      "edge_type": "Import"
    },
    {
      "@id": "edge_682",
      "source": "crates/da/src/lib.rs",
      "target": "{ prism_common :: transaction :: Transaction , sp1_sdk :: SP1ProofWithPublicValues }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_683",
      "source": "crates/da/src/lib.rs#FinalizedEpoch",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_684",
      "source": "crates/da/src/lib.rs#FinalizedEpoch",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_685",
      "source": "crates/da/src/lib.rs#FinalizedEpoch",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_686",
      "source": "crates/da/src/lib.rs#FinalizedEpoch",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_687",
      "source": "crates/da/src/lib.rs#impl_TryFrom<&Blob>_FinalizedEpoch",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_688",
      "source": "crates/da/src/memory.rs",
      "target": "crate :: { DataAvailabilityLayer , FinalizedEpoch , LightDataAvailabilityLayer }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_689",
      "source": "crates/da/src/memory.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_690",
      "source": "crates/da/src/memory.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_691",
      "source": "crates/da/src/memory.rs",
      "target": "lumina_node :: events :: EventSubscriber",
      "edge_type": "Import"
    },
    {
      "@id": "edge_692",
      "source": "crates/da/src/memory.rs",
      "target": "prism_common :: transaction :: Transaction",
      "edge_type": "Import"
    },
    {
      "@id": "edge_693",
      "source": "crates/da/src/memory.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_694",
      "source": "crates/da/src/memory.rs",
      "target": "tokio :: { sync :: { Mutex , RwLock , broadcast } , time :: { Duration , interval } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_695",
      "source": "crates/da/src/memory.rs",
      "target": "tracing :: debug",
      "edge_type": "Import"
    },
    {
      "@id": "edge_696",
      "source": "crates/da/src/memory.rs#Block",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_697",
      "source": "crates/da/src/memory.rs#Block",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_698",
      "source": "crates/da/src/memory.rs#InMemoryDataAvailabilityLayer",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_699",
      "source": "crates/da/src/memory.rs#impl_LightDataAvailabilityLayer_InMemoryDataAvailabilityLayer",
      "target": "trait:LightDataAvailabilityLayer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_700",
      "source": "crates/da/src/memory.rs#impl_DataAvailabilityLayer_InMemoryDataAvailabilityLayer",
      "target": "trait:DataAvailabilityLayer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_701",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "crate :: { FinalizedEpoch , LightDataAvailabilityLayer }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_702",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "anyhow :: { Context , Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_703",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_704",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "celestia_types :: { Blob , nmt :: Namespace }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_705",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "lumina_node :: events :: EventSubscriber",
      "edge_type": "Import"
    },
    {
      "@id": "edge_706",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "prism_errors :: { DataAvailabilityError , GeneralError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_707",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "std :: { self , sync :: { Arc , atomic :: { AtomicU64 , Ordering } , } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_708",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "tracing :: { error , trace }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_709",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "tokio :: sync :: { Mutex , broadcast }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_710",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "crate :: DataAvailabilityLayer",
      "edge_type": "Import"
    },
    {
      "@id": "edge_711",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "celestia_rpc :: { BlobClient , Client , HeaderClient , TxConfig }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_712",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "celestia_types :: AppVersion",
      "edge_type": "Import"
    },
    {
      "@id": "edge_713",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "prism_common :: transaction :: Transaction",
      "edge_type": "Import"
    },
    {
      "@id": "edge_714",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "prism_serde :: binary :: ToBinary",
      "edge_type": "Import"
    },
    {
      "@id": "edge_715",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "tokio :: task :: spawn",
      "edge_type": "Import"
    },
    {
      "@id": "edge_716",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "tracing :: { debug , warn }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_717",
      "source": "crates/da/src/celestia/full_node.rs",
      "target": "super :: utils :: { CelestiaConfig , create_namespace }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_718",
      "source": "crates/da/src/celestia/full_node.rs#impl_LightDataAvailabilityLayer_CelestiaConnection",
      "target": "trait:LightDataAvailabilityLayer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_719",
      "source": "crates/da/src/celestia/full_node.rs#impl_DataAvailabilityLayer_CelestiaConnection",
      "target": "trait:DataAvailabilityLayer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_720",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "super :: utils :: { NetworkConfig , create_namespace }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_721",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "crate :: { FinalizedEpoch , LightDataAvailabilityLayer }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_722",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "anyhow :: { Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_723",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_724",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "blockstore :: EitherBlockstore",
      "edge_type": "Import"
    },
    {
      "@id": "edge_725",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "celestia_types :: nmt :: Namespace",
      "edge_type": "Import"
    },
    {
      "@id": "edge_726",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "lumina_node :: { Node , NodeError , blockstore :: InMemoryBlockstore , events :: EventSubscriber , store :: { EitherStore , InMemoryStore , StoreError } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_727",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "prism_errors :: DataAvailabilityError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_728",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "std :: { self , sync :: Arc }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_729",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "tokio :: sync :: { Mutex , RwLock }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_730",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "tracing :: { debug , trace , warn }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_731",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "{ lumina_node :: { blockstore :: IndexedDbBlockstore , store :: IndexedDbStore } , lumina_node_wasm :: utils :: resolve_dnsaddr_multiaddress , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_732",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "libp2p :: Multiaddr",
      "edge_type": "Import"
    },
    {
      "@id": "edge_733",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "lumina_node :: NodeBuilder",
      "edge_type": "Import"
    },
    {
      "@id": "edge_734",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "{ redb :: Database , tokio :: task :: spawn_blocking }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_735",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "lumina_node_uniffi :: types :: NodeConfig",
      "edge_type": "Import"
    },
    {
      "@id": "edge_736",
      "source": "crates/da/src/celestia/light_client.rs",
      "target": "lumina_node :: { blockstore :: RedbBlockstore , store :: RedbStore }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_737",
      "source": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_738",
      "source": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_739",
      "source": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_740",
      "source": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "target": "resolve_dnsaddr_multiaddress",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_741",
      "source": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "target": "extend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_742",
      "source": "crates/da/src/celestia/light_client.rs#resolve_bootnodes",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_743",
      "source": "crates/da/src/celestia/light_client.rs#impl_LightDataAvailabilityLayer_LightClientConnection",
      "target": "trait:LightDataAvailabilityLayer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_744",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "std :: { str :: FromStr , time :: Duration , fmt }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_745",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "anyhow :: { Context , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_746",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "celestia_types :: nmt :: Namespace",
      "edge_type": "Import"
    },
    {
      "@id": "edge_747",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "lumina_node :: { network :: Network as CelestiaNetwork , node :: { DEFAULT_PRUNING_DELAY , DEFAULT_SAMPLING_WINDOW } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_748",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "prism_keys :: VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_749",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "prism_serde :: { self , base64 :: FromBase64 , hex :: FromHex }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_750",
      "source": "crates/da/src/celestia/utils.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_751",
      "source": "crates/da/src/celestia/utils.rs#CelestiaConfig",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_752",
      "source": "crates/da/src/celestia/utils.rs#CelestiaConfig",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_753",
      "source": "crates/da/src/celestia/utils.rs#CelestiaConfig",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_754",
      "source": "crates/da/src/celestia/utils.rs#CelestiaConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_755",
      "source": "crates/da/src/celestia/utils.rs#impl_Default_CelestiaConfig",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_756",
      "source": "crates/da/src/celestia/utils.rs#Network",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_757",
      "source": "crates/da/src/celestia/utils.rs#Network",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_758",
      "source": "crates/da/src/celestia/utils.rs#Network",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_759",
      "source": "crates/da/src/celestia/utils.rs#Network",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_760",
      "source": "crates/da/src/celestia/utils.rs#impl_fmt::Display_Network",
      "target": "trait:fmt::Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_761",
      "source": "crates/da/src/celestia/utils.rs#NetworkConfig",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_762",
      "source": "crates/da/src/celestia/utils.rs#NetworkConfig",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_763",
      "source": "crates/da/src/celestia/utils.rs#NetworkConfig",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_764",
      "source": "crates/da/src/celestia/utils.rs#NetworkConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_765",
      "source": "crates/da/src/celestia/utils.rs#impl_Default_NetworkConfig",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_766",
      "source": "crates/da/src/celestia/utils.rs#impl_FromStr_Network",
      "target": "trait:FromStr",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_767",
      "source": "crates/da/src/celestia/utils.rs#create_namespace",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_768",
      "source": "crates/da/src/celestia/utils.rs#create_namespace",
      "target": "Vec::from_hex",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_769",
      "source": "crates/da/src/celestia/utils.rs#create_namespace",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_770",
      "source": "crates/da/src/celestia/utils.rs#create_namespace",
      "target": "Namespace::new_v0",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_771",
      "source": "crates/zk/sp1/src/bin/base_prover.rs",
      "target": "prism_tree :: proofs :: Batch",
      "edge_type": "Import"
    },
    {
      "@id": "edge_772",
      "source": "crates/zk/sp1/src/bin/base_prover.rs#main",
      "target": "sp1_zkvm::io::read",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_773",
      "source": "crates/zk/sp1/src/bin/base_prover.rs#main",
      "target": "sp1_zkvm::io::commit_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_774",
      "source": "crates/zk/sp1/src/bin/base_prover.rs#main",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_775",
      "source": "crates/zk/sp1/src/bin/base_prover.rs#main",
      "target": "verify",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_776",
      "source": "crates/zk/sp1/src/bin/base_prover.rs#main",
      "target": "sp1_zkvm::io::commit_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_777",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs",
      "target": "prism_tree :: proofs :: Batch",
      "edge_type": "Import"
    },
    {
      "@id": "edge_778",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs",
      "target": "sha2 :: { Digest , Sha256 }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_779",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "sp1_zkvm::io::read_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_780",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "Sha256::digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_781",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "sp1_zkvm::io::read",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_782",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "sp1_zkvm::lib::verify::verify_sp1_proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_783",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_784",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "sp1_zkvm::io::read",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_785",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "sp1_zkvm::io::commit_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_786",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_787",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "verify",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_788",
      "source": "crates/zk/sp1/src/bin/recursive_prover.rs#main",
      "target": "sp1_zkvm::io::commit_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_789",
      "source": "crates/common/src/operation.rs",
      "target": "anyhow :: { bail , ensure , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_790",
      "source": "crates/common/src/operation.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_791",
      "source": "crates/common/src/operation.rs",
      "target": "std :: { self , fmt :: Display }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_792",
      "source": "crates/common/src/operation.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_793",
      "source": "crates/common/src/operation.rs",
      "target": "prism_keys :: { Signature , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_794",
      "source": "crates/common/src/operation.rs",
      "target": "prism_serde :: raw_or_b64",
      "edge_type": "Import"
    },
    {
      "@id": "edge_795",
      "source": "crates/common/src/operation.rs#Operation",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_796",
      "source": "crates/common/src/operation.rs#Operation",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_797",
      "source": "crates/common/src/operation.rs#Operation",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_798",
      "source": "crates/common/src/operation.rs#Operation",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_799",
      "source": "crates/common/src/operation.rs#Operation",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_800",
      "source": "crates/common/src/operation.rs#Operation",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_801",
      "source": "crates/common/src/operation.rs#SignatureBundle",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_802",
      "source": "crates/common/src/operation.rs#SignatureBundle",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_803",
      "source": "crates/common/src/operation.rs#SignatureBundle",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_804",
      "source": "crates/common/src/operation.rs#SignatureBundle",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_805",
      "source": "crates/common/src/operation.rs#SignatureBundle",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_806",
      "source": "crates/common/src/operation.rs#SignatureBundle",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_807",
      "source": "crates/common/src/operation.rs#ServiceChallengeInput",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_808",
      "source": "crates/common/src/operation.rs#ServiceChallengeInput",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_809",
      "source": "crates/common/src/operation.rs#ServiceChallengeInput",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_810",
      "source": "crates/common/src/operation.rs#ServiceChallengeInput",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_811",
      "source": "crates/common/src/operation.rs#ServiceChallengeInput",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_812",
      "source": "crates/common/src/operation.rs#ServiceChallengeInput",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_813",
      "source": "crates/common/src/operation.rs#ServiceChallenge",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_814",
      "source": "crates/common/src/operation.rs#ServiceChallenge",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_815",
      "source": "crates/common/src/operation.rs#ServiceChallenge",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_816",
      "source": "crates/common/src/operation.rs#ServiceChallenge",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_817",
      "source": "crates/common/src/operation.rs#ServiceChallenge",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_818",
      "source": "crates/common/src/operation.rs#ServiceChallenge",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_819",
      "source": "crates/common/src/operation.rs#impl_From<SigningKey>_ServiceChallenge",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_820",
      "source": "crates/common/src/operation.rs#impl_Display_Operation",
      "target": "trait:Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_821",
      "source": "crates/common/src/transaction.rs",
      "target": "std :: { error :: Error , fmt :: { Display , Formatter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_822",
      "source": "crates/common/src/transaction.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_823",
      "source": "crates/common/src/transaction.rs",
      "target": "celestia_types :: Blob",
      "edge_type": "Import"
    },
    {
      "@id": "edge_824",
      "source": "crates/common/src/transaction.rs",
      "target": "prism_keys :: { Signature , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_825",
      "source": "crates/common/src/transaction.rs",
      "target": "prism_serde :: binary :: { FromBinary , ToBinary }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_826",
      "source": "crates/common/src/transaction.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_827",
      "source": "crates/common/src/transaction.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_828",
      "source": "crates/common/src/transaction.rs",
      "target": "crate :: operation :: { Operation , SignatureBundle }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_829",
      "source": "crates/common/src/transaction.rs#UnsignedTransaction",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_830",
      "source": "crates/common/src/transaction.rs#UnsignedTransaction",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_831",
      "source": "crates/common/src/transaction.rs#UnsignedTransaction",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_832",
      "source": "crates/common/src/transaction.rs#UnsignedTransaction",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_833",
      "source": "crates/common/src/transaction.rs#UnsignedTransaction",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_834",
      "source": "crates/common/src/transaction.rs#Transaction",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_835",
      "source": "crates/common/src/transaction.rs#Transaction",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_836",
      "source": "crates/common/src/transaction.rs#Transaction",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_837",
      "source": "crates/common/src/transaction.rs#Transaction",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_838",
      "source": "crates/common/src/transaction.rs#Transaction",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_839",
      "source": "crates/common/src/transaction.rs#Transaction",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_840",
      "source": "crates/common/src/transaction.rs#impl_TryFrom<&Blob>_Transaction",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_841",
      "source": "crates/common/src/transaction.rs#TransactionError",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_842",
      "source": "crates/common/src/transaction.rs#TransactionError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_843",
      "source": "crates/common/src/transaction.rs#impl_Display_TransactionError",
      "target": "trait:Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_844",
      "source": "crates/common/src/transaction.rs#impl_Error_TransactionError",
      "target": "trait:Error",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_845",
      "source": "crates/common/src/tests/mod.rs",
      "target": "prism_keys :: SigningKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_846",
      "source": "crates/common/src/tests/mod.rs",
      "target": "crate :: { account :: Account , operation :: Operation }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_847",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "SigningKey::new_ed25519",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_848",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "SigningKey::new_ed25519",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_849",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_850",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_851",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_852",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_853",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "requiring_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_854",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_855",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_856",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "register_service",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_857",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_858",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_859",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_860",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_861",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_862",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_863",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "requiring_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_864",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_865",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_866",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "register_service",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_867",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_868",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_869",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_870",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_871",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_872",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_873",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_874",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_875",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "requiring_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_876",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_877",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_878",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "register_service",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_879",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_880",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_881",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_882",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_883",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_884",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_885",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_886",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "SigningKey::new_ed25519",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_887",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_888",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_889",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_890",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_891",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "requiring_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_892",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_893",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_894",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "register_service",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_895",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_896",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_897",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_898",
      "source": "crates/common/src/tests/mod.rs#test_process_register_service_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_899",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "SigningKey::new_ed25519",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_900",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "SigningKey::new_ed25519",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_901",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_902",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_903",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_904",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_905",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "meeting_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_906",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_907",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "for_service_with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_908",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_909",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "create_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_910",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_911",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_912",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_913",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_914",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_915",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_916",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "meeting_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_917",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_918",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "for_service_with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_919",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_920",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "create_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_921",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_922",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_923",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_924",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_925",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_926",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_927",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_928",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_929",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "meeting_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_930",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_931",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "for_service_with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_932",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_933",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "create_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_934",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_935",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_936",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_937",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_938",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_939",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_940",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_941",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "SigningKey::new_ed25519",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_942",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_943",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_944",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_945",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_946",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "meeting_signed_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_947",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_948",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "for_service_with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_949",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "with_id",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_950",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "create_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_951",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "Account::builder",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_952",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_953",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_954",
      "source": "crates/common/src/tests/mod.rs#test_process_create_account_transactions",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_955",
      "source": "crates/common/src/digest.rs",
      "target": "std :: fmt :: Display",
      "edge_type": "Import"
    },
    {
      "@id": "edge_956",
      "source": "crates/common/src/digest.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_957",
      "source": "crates/common/src/digest.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_958",
      "source": "crates/common/src/digest.rs",
      "target": "prism_serde :: { base64 :: FromBase64 , hex :: { FromHex , ToHex } , raw_or_hex , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_959",
      "source": "crates/common/src/digest.rs",
      "target": "sha2 :: { Digest as _ , Sha256 }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_960",
      "source": "crates/common/src/digest.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_961",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_962",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_963",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_964",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_965",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_966",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_967",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:Copy",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_968",
      "source": "crates/common/src/digest.rs#Digest",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_969",
      "source": "crates/common/src/digest.rs#impl_Default_Digest",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_970",
      "source": "crates/common/src/digest.rs#impl_From<[u8;N]>_Digest",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_971",
      "source": "crates/common/src/digest.rs#impl_AsRef<[u8]>_Digest",
      "target": "trait:AsRef",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_972",
      "source": "crates/common/src/digest.rs#impl_FromHex_Digest",
      "target": "trait:FromHex",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_973",
      "source": "crates/common/src/digest.rs#impl_FromBase64_Digest",
      "target": "trait:FromBase64",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_974",
      "source": "crates/common/src/digest.rs#impl_Display_Digest",
      "target": "trait:Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_975",
      "source": "crates/common/src/account.rs",
      "target": "anyhow :: { anyhow , bail , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_976",
      "source": "crates/common/src/account.rs",
      "target": "prism_keys :: VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_977",
      "source": "crates/common/src/account.rs",
      "target": "prism_serde :: raw_or_b64",
      "edge_type": "Import"
    },
    {
      "@id": "edge_978",
      "source": "crates/common/src/account.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_979",
      "source": "crates/common/src/account.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_980",
      "source": "crates/common/src/account.rs",
      "target": "crate :: { api :: { noop :: NoopPrismApi , PrismApi } , builder :: { ModifyAccountRequestBuilder , RequestBuilder } , operation :: { Operation , ServiceChallenge } , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_981",
      "source": "crates/common/src/account.rs#SignedData",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_982",
      "source": "crates/common/src/account.rs#SignedData",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_983",
      "source": "crates/common/src/account.rs#SignedData",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_984",
      "source": "crates/common/src/account.rs#SignedData",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_985",
      "source": "crates/common/src/account.rs#SignedData",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_986",
      "source": "crates/common/src/account.rs#SignedData",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_987",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_988",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_989",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_990",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_991",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_992",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_993",
      "source": "crates/common/src/account.rs#Account",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_994",
      "source": "crates/common/src/test_transaction_builder.rs",
      "target": "std :: collections :: HashMap",
      "edge_type": "Import"
    },
    {
      "@id": "edge_995",
      "source": "crates/common/src/test_transaction_builder.rs",
      "target": "crate :: { account :: Account , digest :: Digest , operation :: { Operation , ServiceChallenge , ServiceChallengeInput , SignatureBundle } , transaction :: { Transaction , UnsignedTransaction } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_996",
      "source": "crates/common/src/test_transaction_builder.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_997",
      "source": "crates/common/src/test_transaction_builder.rs#impl_Default_TestTransactionBuilder",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_998",
      "source": "crates/common/src/api/types.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_999",
      "source": "crates/common/src/api/types.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1000",
      "source": "crates/common/src/api/types.rs",
      "target": "crate :: { account :: Account , digest :: Digest }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1001",
      "source": "crates/common/src/api/types.rs#AccountRequest",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1002",
      "source": "crates/common/src/api/types.rs#AccountRequest",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1003",
      "source": "crates/common/src/api/types.rs#AccountRequest",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1004",
      "source": "crates/common/src/api/types.rs#AccountRequest",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1005",
      "source": "crates/common/src/api/types.rs#AccountRequest",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1006",
      "source": "crates/common/src/api/types.rs#AccountResponse",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1007",
      "source": "crates/common/src/api/types.rs#AccountResponse",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1008",
      "source": "crates/common/src/api/types.rs#AccountResponse",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1009",
      "source": "crates/common/src/api/types.rs#AccountResponse",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1010",
      "source": "crates/common/src/api/types.rs#AccountResponse",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1011",
      "source": "crates/common/src/api/types.rs#CommitmentResponse",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1012",
      "source": "crates/common/src/api/types.rs#CommitmentResponse",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1013",
      "source": "crates/common/src/api/types.rs#CommitmentResponse",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1014",
      "source": "crates/common/src/api/types.rs#CommitmentResponse",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1015",
      "source": "crates/common/src/api/types.rs#CommitmentResponse",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1016",
      "source": "crates/common/src/api/types.rs#CommitmentResponse",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1017",
      "source": "crates/common/src/api/types.rs#HashedMerkleProof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1018",
      "source": "crates/common/src/api/types.rs#HashedMerkleProof",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1019",
      "source": "crates/common/src/api/types.rs#HashedMerkleProof",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1020",
      "source": "crates/common/src/api/types.rs#HashedMerkleProof",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1021",
      "source": "crates/common/src/api/types.rs#impl_Default_HashedMerkleProof",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1022",
      "source": "crates/common/src/api/mod.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1023",
      "source": "crates/common/src/api/mod.rs",
      "target": "prism_keys :: { SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1024",
      "source": "crates/common/src/api/mod.rs",
      "target": "std :: { error :: Error , fmt :: { Debug , Display , Formatter } , future :: Future , sync :: Arc , time :: Duration , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1025",
      "source": "crates/common/src/api/mod.rs",
      "target": "crate :: { account :: Account , builder :: RequestBuilder , operation :: SignatureBundle , transaction :: { Transaction , TransactionError } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1026",
      "source": "crates/common/src/api/mod.rs",
      "target": "types :: { AccountResponse , CommitmentResponse }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1027",
      "source": "crates/common/src/api/mod.rs#PrismApiError",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1028",
      "source": "crates/common/src/api/mod.rs#PrismApiError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1029",
      "source": "crates/common/src/api/mod.rs#impl_Display_PrismApiError",
      "target": "trait:Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1030",
      "source": "crates/common/src/api/mod.rs#impl_Error_PrismApiError",
      "target": "trait:Error",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1031",
      "source": "crates/common/src/api/mod.rs#impl_From<TransactionError>_PrismApiError",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1032",
      "source": "crates/common/src/api/mod.rs#impl_From<anyhow::Error>_PrismApiError",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1033",
      "source": "crates/common/src/api/mod.rs#impl_PendingTransaction<'a>_PendingTransactionImpl<'a,P>",
      "target": "trait:PendingTransaction",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1034",
      "source": "crates/common/src/api/mock.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1035",
      "source": "crates/common/src/api/mock.rs",
      "target": "mockall :: mock",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1036",
      "source": "crates/common/src/api/mock.rs",
      "target": "std :: time :: Duration",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1037",
      "source": "crates/common/src/api/mock.rs",
      "target": "crate :: { account :: Account , api :: PendingTransaction , transaction :: Transaction }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1038",
      "source": "crates/common/src/api/mock.rs",
      "target": "super :: { types :: { AccountResponse , CommitmentResponse } , PrismApi , PrismApiError , PrismApiTimer , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1039",
      "source": "crates/common/src/api/mock.rs#impl_PrismApiTimer_MockPrismTimer",
      "target": "trait:PrismApiTimer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1040",
      "source": "crates/common/src/api/mock.rs#impl_PendingTransaction<'_>_MockPrismPendingTransaction",
      "target": "trait:PendingTransaction",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1041",
      "source": "crates/common/src/api/mock.rs#impl_PrismApi_MockPrismApi",
      "target": "trait:PrismApi",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1042",
      "source": "crates/common/src/api/noop.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1043",
      "source": "crates/common/src/api/noop.rs",
      "target": "std :: time :: Duration",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1044",
      "source": "crates/common/src/api/noop.rs",
      "target": "super :: { types :: { AccountResponse , CommitmentResponse } , PendingTransaction , PrismApi , PrismApiError , PrismApiTimer , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1045",
      "source": "crates/common/src/api/noop.rs",
      "target": "crate :: { account :: Account , transaction :: Transaction }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1046",
      "source": "crates/common/src/api/noop.rs#impl_PrismApiTimer_NoopTimer",
      "target": "trait:PrismApiTimer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1047",
      "source": "crates/common/src/api/noop.rs#impl_PendingTransaction<'_>_NoopPendingTransaction",
      "target": "trait:PendingTransaction",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1048",
      "source": "crates/common/src/api/noop.rs#impl_PrismApi_NoopPrismApi",
      "target": "trait:PrismApi",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1049",
      "source": "crates/common/src/builder.rs",
      "target": "prism_keys :: { SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1050",
      "source": "crates/common/src/builder.rs",
      "target": "crate :: { account :: Account , api :: { noop :: NoopPrismApi , PendingTransaction , PrismApi , PrismApiError } , digest :: Digest , operation :: { Operation , ServiceChallenge , ServiceChallengeInput , SignatureBundle } , transaction :: { Transaction , TransactionError , UnsignedTransaction } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1051",
      "source": "crates/common/src/builder.rs#impl_Default_RequestBuilder<'_,P>",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1052",
      "source": "crates/zk/groth16/src/hashchain.rs",
      "target": "anyhow :: { anyhow , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1053",
      "source": "crates/zk/groth16/src/hashchain.rs",
      "target": "bellman :: { Circuit , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1054",
      "source": "crates/zk/groth16/src/hashchain.rs",
      "target": "bls12_381 :: Scalar",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1055",
      "source": "crates/zk/groth16/src/hashchain.rs",
      "target": "indexed_merkle_tree :: sha256_mod",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1056",
      "source": "crates/zk/groth16/src/hashchain.rs",
      "target": "prism_common :: hashchain :: HashchainEntry",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1057",
      "source": "crates/zk/groth16/src/hashchain.rs#HashChainEntryCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1058",
      "source": "crates/zk/groth16/src/hashchain.rs#impl_Circuit<Scalar>_HashChainEntryCircuit",
      "target": "trait:Circuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1059",
      "source": "crates/zk/groth16/src/merkle_insertion.rs",
      "target": "crate :: { merkle_update :: prove_update , utils :: { create_and_verify_snark , recalculate_hash_as_scalar , unpack_and_process } , LessThanCircuit , ProofVariantCircuit , UpdateMerkleProofCircuit , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1060",
      "source": "crates/zk/groth16/src/merkle_insertion.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1061",
      "source": "crates/zk/groth16/src/merkle_insertion.rs",
      "target": "bellman :: { groth16 , Circuit , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1062",
      "source": "crates/zk/groth16/src/merkle_insertion.rs",
      "target": "bls12_381 :: { Bls12 , Scalar }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1063",
      "source": "crates/zk/groth16/src/merkle_insertion.rs",
      "target": "indexed_merkle_tree :: { node :: { LeafNode , Node } , tree :: InsertProof , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1064",
      "source": "crates/zk/groth16/src/merkle_insertion.rs",
      "target": "prism_errors :: PrismError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1065",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#InsertMerkleProofCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1066",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#impl_Circuit<Scalar>_InsertMerkleProofCircuit",
      "target": "trait:Circuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1067",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_insertion",
      "target": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1068",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_insertion",
      "target": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1069",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_insertion",
      "target": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1070",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_insertion",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1071",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1072",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "try_into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1073",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "get_label",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1074",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1075",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "try_into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1076",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "get_next",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1077",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1078",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "try_into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1079",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1080",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "synthesize",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1081",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "LessThanCircuit::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1082",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1083",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "synthesize",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1084",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "LessThanCircuit::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1085",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1086",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1087",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1088",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1089",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1090",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1091",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1092",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1093",
      "source": "crates/zk/groth16/src/merkle_insertion.rs#prove_non_membership",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1094",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "anyhow :: { anyhow , Context , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1095",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "bellman :: { groth16 , Circuit , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1096",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "bls12_381 :: { Bls12 , G1Affine , G2Affine , Scalar }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1097",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "prism_errors :: { GeneralError , PrismError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1098",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "std :: fmt",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1099",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "hashchain :: HashChainEntryCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1100",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "less_than :: LessThanCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1101",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "merkle_batch :: BatchMerkleProofCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1102",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "merkle_insertion :: InsertMerkleProofCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1103",
      "source": "crates/zk/groth16/src/lib.rs",
      "target": "merkle_update :: UpdateMerkleProofCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1104",
      "source": "crates/zk/groth16/src/lib.rs#ProofVariantCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1105",
      "source": "crates/zk/groth16/src/lib.rs#impl_Circuit<Scalar>_ProofVariantCircuit",
      "target": "trait:Circuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1106",
      "source": "crates/zk/groth16/src/lib.rs#G1",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1107",
      "source": "crates/zk/groth16/src/lib.rs#G2",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1108",
      "source": "crates/zk/groth16/src/lib.rs#impl_fmt::Debug_G1",
      "target": "trait:fmt::Debug",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1109",
      "source": "crates/zk/groth16/src/lib.rs#impl_fmt::Debug_G2",
      "target": "trait:fmt::Debug",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1110",
      "source": "crates/zk/groth16/src/lib.rs#impl_TryFrom<G1>_bls12_381::G1Affine",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1111",
      "source": "crates/zk/groth16/src/lib.rs#impl_TryFrom<G2>_bls12_381::G2Affine",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1112",
      "source": "crates/zk/groth16/src/lib.rs#Bls12Proof",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1113",
      "source": "crates/zk/groth16/src/lib.rs#Bls12Proof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1114",
      "source": "crates/zk/groth16/src/lib.rs#impl_TryFrom<Bls12Proof>_groth16::Proof<Bls12>",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1115",
      "source": "crates/zk/groth16/src/lib.rs#impl_From<groth16::Proof<Bls12>>_Bls12Proof",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1116",
      "source": "crates/zk/groth16/src/lib.rs#VerifyingKey",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1117",
      "source": "crates/zk/groth16/src/lib.rs#VerifyingKey",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1118",
      "source": "crates/zk/groth16/src/lib.rs#impl_From<groth16::VerifyingKey<Bls12>>_VerifyingKey",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1119",
      "source": "crates/zk/groth16/src/lib.rs#impl_TryFrom<VerifyingKey>_groth16::VerifyingKey<Bls12>",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1120",
      "source": "crates/zk/groth16/src/merkle_batch.rs",
      "target": "crate :: { merkle_insertion :: prove_insertion , merkle_update :: prove_update , utils :: create_and_verify_snark , InsertMerkleProofCircuit , ProofVariantCircuit , UpdateMerkleProofCircuit , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1121",
      "source": "crates/zk/groth16/src/merkle_batch.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1122",
      "source": "crates/zk/groth16/src/merkle_batch.rs",
      "target": "bellman :: { groth16 , Circuit , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1123",
      "source": "crates/zk/groth16/src/merkle_batch.rs",
      "target": "bls12_381 :: { Bls12 , Scalar }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1124",
      "source": "crates/zk/groth16/src/merkle_batch.rs",
      "target": "indexed_merkle_tree :: { tree :: Proof , Hash }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1125",
      "source": "crates/zk/groth16/src/merkle_batch.rs#BatchMerkleProofCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1126",
      "source": "crates/zk/groth16/src/merkle_batch.rs#impl_Circuit<Scalar>_BatchMerkleProofCircuit",
      "target": "trait:Circuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1127",
      "source": "crates/zk/groth16/src/merkle_update.rs",
      "target": "crate :: { utils :: { create_and_verify_snark , recalculate_hash_as_scalar , unpack_and_process } , ProofVariantCircuit , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1128",
      "source": "crates/zk/groth16/src/merkle_update.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1129",
      "source": "crates/zk/groth16/src/merkle_update.rs",
      "target": "bellman :: { groth16 , Circuit , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1130",
      "source": "crates/zk/groth16/src/merkle_update.rs",
      "target": "bls12_381 :: { Bls12 , Scalar }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1131",
      "source": "crates/zk/groth16/src/merkle_update.rs",
      "target": "indexed_merkle_tree :: { node :: Node , tree :: UpdateProof }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1132",
      "source": "crates/zk/groth16/src/merkle_update.rs",
      "target": "prism_errors :: PrismError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1133",
      "source": "crates/zk/groth16/src/merkle_update.rs#UpdateMerkleProofCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1134",
      "source": "crates/zk/groth16/src/merkle_update.rs#impl_Circuit<Scalar>_UpdateMerkleProofCircuit",
      "target": "trait:Circuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1135",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1136",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1137",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1138",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1139",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1140",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1141",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1142",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1143",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1144",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1145",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1146",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1147",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1148",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1149",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1150",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1151",
      "source": "crates/zk/groth16/src/merkle_update.rs#prove_update",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1152",
      "source": "crates/zk/groth16/src/less_than.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1153",
      "source": "crates/zk/groth16/src/less_than.rs",
      "target": "bellman :: { gadgets :: boolean :: Boolean , Circuit , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1154",
      "source": "crates/zk/groth16/src/less_than.rs",
      "target": "bls12_381 :: Scalar",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1155",
      "source": "crates/zk/groth16/src/less_than.rs",
      "target": "ff :: PrimeFieldBits",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1156",
      "source": "crates/zk/groth16/src/less_than.rs#LessThanCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1157",
      "source": "crates/zk/groth16/src/less_than.rs#impl_Circuit<Scalar>_LessThanCircuit",
      "target": "trait:Circuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1158",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "crate :: ProofVariantCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1159",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "anyhow :: { anyhow , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1160",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "bellman :: groth16 :: { self , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1161",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "bls12_381 :: { Bls12 , Scalar }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1162",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "indexed_merkle_tree :: { node :: Node , sha256_mod , tree :: MerkleProof , Hash }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1163",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "prism_errors :: { GeneralError , PrismError , ProofError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1164",
      "source": "crates/zk/groth16/src/utils.rs",
      "target": "rand :: rngs :: OsRng",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1165",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1166",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "groth16::generate_random_parameters",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1167",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1168",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "PrismError::Proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1169",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "ProofError::ProofUnpackError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1170",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1171",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "groth16::create_random_proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1172",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "PrismError::Proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1173",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "ProofError::GenerationError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1174",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1175",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "groth16::prepare_verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1176",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1177",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "groth16::verify_proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1178",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "PrismError::Proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1179",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "ProofError::VerificationError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1180",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1181",
      "source": "crates/zk/groth16/src/utils.rs#create_and_verify_snark",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1182",
      "source": "crates/zk/groth16/src/utils.rs#unpack_and_process",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1183",
      "source": "crates/zk/groth16/src/utils.rs#unpack_and_process",
      "target": "try_into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1184",
      "source": "crates/zk/groth16/src/utils.rs#unpack_and_process",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1185",
      "source": "crates/zk/groth16/src/utils.rs#unpack_and_process",
      "target": "Err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1186",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "groth16::prepare_verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1187",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1188",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "into_iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1189",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1190",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "PrismError::General",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1191",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "GeneralError::ParsingError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1192",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1193",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "groth16::verify_proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1194",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "PrismError::Proof",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1195",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "ProofError::VerificationError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1196",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1197",
      "source": "crates/zk/groth16/src/utils.rs#validate_epoch",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1198",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "get_hash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1199",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "skip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1200",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1201",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "is_left_sibling",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1202",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "concat",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1203",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "as_ref",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1204",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "get_hash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1205",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "as_ref",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1206",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "concat",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1207",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "as_ref",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1208",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "as_ref",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1209",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "get_hash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1210",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "sha256_mod",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1211",
      "source": "crates/zk/groth16/src/utils.rs#recalculate_hash_as_scalar",
      "target": "try_into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1212",
      "source": "crates/node_types/wasm-lightclient/src/client.rs",
      "target": "wasm_bindgen :: prelude :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1213",
      "source": "crates/node_types/wasm-lightclient/src/client.rs",
      "target": "web_sys :: BroadcastChannel",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1214",
      "source": "crates/node_types/wasm-lightclient/src/client.rs",
      "target": "crate :: { commands :: { LightClientCommand , WorkerResponse } , worker :: MessagePortLike , worker_communication :: WorkerClient , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1215",
      "source": "crates/node_types/wasm-lightclient/src/error.rs",
      "target": "anyhow :: { Error as AnyhowError , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1216",
      "source": "crates/node_types/wasm-lightclient/src/error.rs",
      "target": "prism_errors :: { DataAvailabilityError , GeneralError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1217",
      "source": "crates/node_types/wasm-lightclient/src/error.rs",
      "target": "thiserror :: Error",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1218",
      "source": "crates/node_types/wasm-lightclient/src/error.rs#WasmLightClientError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1219",
      "source": "crates/node_types/wasm-lightclient/src/error.rs#WasmLightClientError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1220",
      "source": "crates/node_types/wasm-lightclient/src/error.rs#WorkerError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1221",
      "source": "crates/node_types/wasm-lightclient/src/error.rs#WorkerError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1222",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "js_sys :: Function",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1223",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "prism_da :: celestia :: { light_client :: LightClientConnection , utils :: Network }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1224",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "prism_lightclient :: { LightClient , events :: { EventChannel , EventPublisher , EventSubscriber , LightClientEvent } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1225",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "std :: { str :: FromStr , sync :: Arc }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1226",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "wasm_bindgen_futures :: spawn_local",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1227",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "web_sys :: { BroadcastChannel , MessagePort , console }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1228",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "crate :: { commands :: { LightClientCommand , WorkerResponse } , worker_communication :: { WorkerServer , random_id } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1229",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs",
      "target": "wasm_bindgen :: { JsCast , prelude :: * }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1230",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#impl_From<MessagePort>_MessagePortLike",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1231",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "EventChannel::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1232",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "publisher",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1233",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "subscribe",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1234",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1235",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "BroadcastChannel::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1236",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "as_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1237",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "JsError::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1238",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#initialize_event_channel",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1239",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1240",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "serde_wasm_bindgen::to_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1241",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "console::log_2",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1242",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1243",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "post_message",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1244",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "console::error_1",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1245",
      "source": "crates/node_types/wasm-lightclient/src/worker.rs#forward_events",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1246",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1247",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs#LightClientCommand",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1248",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs#LightClientCommand",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1249",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs#LightClientCommand",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1250",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs#WorkerResponse",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1251",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs#WorkerResponse",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1252",
      "source": "crates/node_types/wasm-lightclient/src/commands.rs#WorkerResponse",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1253",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs",
      "target": "js_sys :: Math",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1254",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs",
      "target": "serde_wasm_bindgen :: { from_value , to_value }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1255",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs",
      "target": "tokio :: sync :: { mpsc , Mutex }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1256",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs",
      "target": "wasm_bindgen :: { closure :: Closure , prelude :: * }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1257",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs",
      "target": "web_sys :: { console , MessageEvent }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1258",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs",
      "target": "crate :: { commands :: { LightClientCommand , WorkerResponse } , worker :: MessagePortLike , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1259",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs#random_id",
      "target": "Math::random",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1260",
      "source": "crates/node_types/wasm-lightclient/src/worker_communication.rs#random_id",
      "target": "f64::from",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1261",
      "source": "crates/keys/src/lib.rs",
      "target": "algorithm :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1262",
      "source": "crates/keys/src/lib.rs",
      "target": "signatures :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1263",
      "source": "crates/keys/src/lib.rs",
      "target": "signing_keys :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1264",
      "source": "crates/keys/src/lib.rs",
      "target": "verifying_keys :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1265",
      "source": "crates/keys/src/algorithm.rs",
      "target": "anyhow :: bail",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1266",
      "source": "crates/keys/src/algorithm.rs",
      "target": "pkcs8 :: { AlgorithmIdentifierRef , ObjectIdentifier }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1267",
      "source": "crates/keys/src/algorithm.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1268",
      "source": "crates/keys/src/algorithm.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1269",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1270",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:Copy",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1271",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1272",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1273",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1274",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1275",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1276",
      "source": "crates/keys/src/algorithm.rs#CryptoAlgorithm",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1277",
      "source": "crates/keys/src/algorithm.rs#impl_std::str::FromStr_CryptoAlgorithm",
      "target": "trait:std::str::FromStr",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1278",
      "source": "crates/keys/src/algorithm.rs#impl_std::fmt::Display_CryptoAlgorithm",
      "target": "trait:std::fmt::Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1279",
      "source": "crates/keys/src/algorithm.rs#impl_TryFrom<AlgorithmIdentifierRef<'a>>_CryptoAlgorithm",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1280",
      "source": "crates/keys/src/der.rs",
      "target": "pkcs8 :: { der :: { self , AnyRef , DecodeValue , Encode , EncodeValue , Header , Length , Reader , Sequence , Writer , asn1 :: { ContextSpecific , OctetStringRef } , } , spki :: AlgorithmIdentifier , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1281",
      "source": "crates/keys/src/der.rs#impl_EncodeValue_SignatureInfoRef<'_>",
      "target": "trait:EncodeValue",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1282",
      "source": "crates/keys/src/der.rs#impl_DecodeValue<'a>_SignatureInfoRef<'a>",
      "target": "trait:DecodeValue",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1283",
      "source": "crates/keys/src/der.rs#impl_Sequence<'a>_SignatureInfoRef<'a>",
      "target": "trait:Sequence",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1284",
      "source": "crates/keys/src/cosmos.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1285",
      "source": "crates/keys/src/cosmos.rs",
      "target": "k256 :: ecdsa :: VerifyingKey as Secp256k1VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1286",
      "source": "crates/keys/src/cosmos.rs",
      "target": "prism_serde :: { bech32 :: ToBech32 , raw_or_b64 }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1287",
      "source": "crates/keys/src/cosmos.rs",
      "target": "ripemd :: Ripemd160",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1288",
      "source": "crates/keys/src/cosmos.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1289",
      "source": "crates/keys/src/cosmos.rs",
      "target": "sha2 :: { Digest , Sha256 }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1290",
      "source": "crates/keys/src/cosmos.rs#CosmosSignDoc",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1291",
      "source": "crates/keys/src/cosmos.rs#CosmosSignDoc",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1292",
      "source": "crates/keys/src/cosmos.rs#CosmosFee",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1293",
      "source": "crates/keys/src/cosmos.rs#CosmosFee",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1294",
      "source": "crates/keys/src/cosmos.rs#CosmosMessage",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1295",
      "source": "crates/keys/src/cosmos.rs#CosmosMessage",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1296",
      "source": "crates/keys/src/cosmos.rs#CosmosMessageValue",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1297",
      "source": "crates/keys/src/cosmos.rs#CosmosMessageValue",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1298",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "crates/keys/src/cosmos.rs#signer_from_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1299",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1300",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1301",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "as_ref",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1302",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1303",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "Sha256::digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1304",
      "source": "crates/keys/src/cosmos.rs#cosmos_adr36_hash_message",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1305",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "CosmosSignDoc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1306",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "replace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1307",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "replace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1308",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "replace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1309",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "serde_json::to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1310",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1311",
      "source": "crates/keys/src/cosmos.rs#create_serialized_adr36_sign_doc",
      "target": "into_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1312",
      "source": "crates/keys/src/cosmos.rs#signer_from_key",
      "target": "to_sec1_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1313",
      "source": "crates/keys/src/cosmos.rs#signer_from_key",
      "target": "Sha256::digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1314",
      "source": "crates/keys/src/cosmos.rs#signer_from_key",
      "target": "Ripemd160::digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1315",
      "source": "crates/keys/src/cosmos.rs#signer_from_key",
      "target": "to_bech32",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1316",
      "source": "crates/keys/src/cosmos.rs#signer_from_key",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1317",
      "source": "crates/keys/src/signatures.rs",
      "target": "anyhow :: { Result , bail }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1318",
      "source": "crates/keys/src/signatures.rs",
      "target": "ed25519_consensus :: Signature as Ed25519Signature",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1319",
      "source": "crates/keys/src/signatures.rs",
      "target": "k256 :: ecdsa :: Signature as Secp256k1Signature",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1320",
      "source": "crates/keys/src/signatures.rs",
      "target": "p256 :: ecdsa :: Signature as Secp256r1Signature",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1321",
      "source": "crates/keys/src/signatures.rs",
      "target": "pkcs8 :: { AlgorithmIdentifierRef , SecretDocument , der :: { Decode , asn1 :: OctetStringRef , zeroize :: Zeroize } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1322",
      "source": "crates/keys/src/signatures.rs",
      "target": "prism_serde :: base64 :: ToBase64",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1323",
      "source": "crates/keys/src/signatures.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1324",
      "source": "crates/keys/src/signatures.rs",
      "target": "std :: { borrow :: Cow , fmt :: { Display , Formatter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1325",
      "source": "crates/keys/src/signatures.rs",
      "target": "utoipa :: { PartialSchema , ToSchema , openapi :: { RefOr , Schema } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1326",
      "source": "crates/keys/src/signatures.rs",
      "target": "crate :: { CryptoAlgorithm , ECDSA_SHA256_OID , ED25519_OID , SECP256K1_OID , SECP256R1_OID , der :: SignatureInfoRef , payload :: CryptoPayload , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1327",
      "source": "crates/keys/src/signatures.rs#Signature",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1328",
      "source": "crates/keys/src/signatures.rs#Signature",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1329",
      "source": "crates/keys/src/signatures.rs#Signature",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1330",
      "source": "crates/keys/src/signatures.rs#Signature",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1331",
      "source": "crates/keys/src/signatures.rs#Signature",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1332",
      "source": "crates/keys/src/signatures.rs#Signature",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1333",
      "source": "crates/keys/src/signatures.rs#impl_TryFrom<CryptoPayload>_Signature",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1334",
      "source": "crates/keys/src/signatures.rs#impl_From<Signature>_CryptoPayload",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1335",
      "source": "crates/keys/src/signatures.rs#impl_Display_Signature",
      "target": "trait:Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1336",
      "source": "crates/keys/src/signatures.rs#impl_ToSchema_Signature",
      "target": "trait:ToSchema",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1337",
      "source": "crates/keys/src/signatures.rs#impl_PartialSchema_Signature",
      "target": "trait:PartialSchema",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1338",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "alloy_primitives :: eip191_hash_message",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1339",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "anyhow :: { Result , anyhow , bail }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1340",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "ed25519 :: PublicKeyBytes as Ed25519PublicKeyBytes",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1341",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "ed25519_consensus :: VerificationKey as Ed25519VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1342",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "k256 :: ecdsa :: VerifyingKey as Secp256k1VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1343",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "p256 :: { ecdsa :: { VerifyingKey as Secp256r1VerifyingKey , signature :: { DigestVerifier , hazmat :: PrehashVerifier } , } , pkcs8 :: EncodePublicKey , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1344",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "pkcs8 :: { Document , LineEnding , SubjectPublicKeyInfoRef , der :: { Decode , pem :: PemLabel } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1345",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1346",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "sha2 :: Digest as _",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1347",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "std :: { self , borrow :: Cow , hash :: { Hash , Hasher } , path :: Path , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1348",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "utoipa :: { PartialSchema , ToSchema , openapi :: { RefOr , Schema } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1349",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "crate :: { CryptoAlgorithm , Signature , SigningKey , cosmos :: cosmos_adr36_hash_message , payload :: CryptoPayload , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1350",
      "source": "crates/keys/src/verifying_keys.rs",
      "target": "prism_serde :: base64 :: { FromBase64 , ToBase64 }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1351",
      "source": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1352",
      "source": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1353",
      "source": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1354",
      "source": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1355",
      "source": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1356",
      "source": "crates/keys/src/verifying_keys.rs#VerifyingKey",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1357",
      "source": "crates/keys/src/verifying_keys.rs#impl_Hash_VerifyingKey",
      "target": "trait:Hash",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1358",
      "source": "crates/keys/src/verifying_keys.rs#impl_TryFrom<CryptoPayload>_VerifyingKey",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1359",
      "source": "crates/keys/src/verifying_keys.rs#impl_From<VerifyingKey>_CryptoPayload",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1360",
      "source": "crates/keys/src/verifying_keys.rs#impl_From<SigningKey>_VerifyingKey",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1361",
      "source": "crates/keys/src/verifying_keys.rs#impl_FromBase64_VerifyingKey",
      "target": "trait:FromBase64",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1362",
      "source": "crates/keys/src/verifying_keys.rs#impl_TryFrom<String>_VerifyingKey",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1363",
      "source": "crates/keys/src/verifying_keys.rs#impl_std::fmt::Display_VerifyingKey",
      "target": "trait:std::fmt::Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1364",
      "source": "crates/keys/src/verifying_keys.rs#impl_ToSchema_VerifyingKey",
      "target": "trait:ToSchema",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1365",
      "source": "crates/keys/src/verifying_keys.rs#impl_PartialSchema_VerifyingKey",
      "target": "trait:PartialSchema",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1366",
      "source": "crates/keys/src/payload.rs",
      "target": "prism_serde :: raw_or_b64",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1367",
      "source": "crates/keys/src/payload.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1368",
      "source": "crates/keys/src/payload.rs",
      "target": "utoipa :: ToSchema",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1369",
      "source": "crates/keys/src/payload.rs",
      "target": "crate :: CryptoAlgorithm",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1370",
      "source": "crates/keys/src/payload.rs#CryptoPayload",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1371",
      "source": "crates/keys/src/payload.rs#CryptoPayload",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1372",
      "source": "crates/keys/src/payload.rs#CryptoPayload",
      "target": "trait:ToSchema",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1373",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "alloy_primitives :: eip191_hash_message",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1374",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "anyhow :: { Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1375",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "ed25519 :: { PublicKeyBytes as Ed25519PublicKeyBytes , pkcs8 :: KeypairBytes as Ed25519KeypairBytes , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1376",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "ed25519_consensus :: SigningKey as Ed25519SigningKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1377",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "k256 :: ecdsa :: { Signature as Secp256k1Signature , SigningKey as Secp256k1SigningKey , signature :: { DigestSigner , hazmat :: PrehashSigner } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1378",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "p256 :: ecdsa :: { Signature as Secp256r1Signature , SigningKey as Secp256r1SigningKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1379",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "pkcs8 :: { Document , EncodePrivateKey , LineEnding , PrivateKeyInfo , SecretDocument , der :: { Decode , pem :: PemLabel } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1380",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "std :: path :: Path",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1381",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "sha2 :: Digest as _",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1382",
      "source": "crates/keys/src/signing_keys.rs",
      "target": "crate :: { CryptoAlgorithm , Signature , VerifyingKey , cosmos :: cosmos_adr36_hash_message , payload :: CryptoPayload , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1383",
      "source": "crates/keys/src/signing_keys.rs#get_rng",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1384",
      "source": "crates/keys/src/signing_keys.rs#get_rng",
      "target": "getrandom::getrandom",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1385",
      "source": "crates/keys/src/signing_keys.rs#get_rng",
      "target": "rand::rngs::StdRng::from_seed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1386",
      "source": "crates/keys/src/signing_keys.rs#SigningKey",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1387",
      "source": "crates/keys/src/signing_keys.rs#SigningKey",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1388",
      "source": "crates/keys/src/signing_keys.rs#impl_PartialEq_SigningKey",
      "target": "trait:PartialEq",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1389",
      "source": "crates/keys/src/signing_keys.rs#impl_TryFrom<CryptoPayload>_SigningKey",
      "target": "trait:TryFrom",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1390",
      "source": "crates/keys/src/signing_keys.rs#impl_From<SigningKey>_CryptoPayload",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1391",
      "source": "crates/serde/src/base64.rs",
      "target": "base64 :: { decoded_len_estimate , engine :: general_purpose :: STANDARD as BASE64 , DecodeError , DecodeSliceError , Engine , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1392",
      "source": "crates/serde/src/base64.rs#impl_ToBase64_T",
      "target": "trait:ToBase64",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1393",
      "source": "crates/serde/src/base64.rs#impl_FromBase64_Vec<u8>",
      "target": "trait:FromBase64",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1394",
      "source": "crates/serde/src/base64.rs#impl_FromBase64_[u8;32]",
      "target": "trait:FromBase64",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1395",
      "source": "crates/serde/src/bech32.rs",
      "target": "bech32 :: { Bech32 , DecodeError , EncodeError , Hrp }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1396",
      "source": "crates/serde/src/bech32.rs#impl_ToBech32_T",
      "target": "trait:ToBech32",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1397",
      "source": "crates/serde/src/bech32.rs#impl_FromBech32_Vec<u8>",
      "target": "trait:FromBech32",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1398",
      "source": "crates/serde/src/binary.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1399",
      "source": "crates/serde/src/binary.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1400",
      "source": "crates/serde/src/binary.rs#impl_ToBinary_T",
      "target": "trait:ToBinary",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1401",
      "source": "crates/serde/src/binary.rs#impl_FromBinary_T",
      "target": "trait:FromBinary",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1402",
      "source": "crates/serde/src/hex.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1403",
      "source": "crates/serde/src/hex.rs#impl_ToHex_T",
      "target": "trait:ToHex",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1404",
      "source": "crates/serde/src/hex.rs#impl_FromHex_T",
      "target": "trait:FromHex",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1405",
      "source": "crates/tree/src/lib.rs",
      "target": "prism_common :: account :: Account",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1406",
      "source": "crates/tree/src/lib.rs",
      "target": "proofs :: MerkleProof",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1407",
      "source": "crates/tree/src/lib.rs#AccountResponse",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1408",
      "source": "crates/tree/src/tests/mod.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1409",
      "source": "crates/tree/src/tests/mod.rs",
      "target": "jmt :: { mock :: MockTreeStore , KeyHash }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1410",
      "source": "crates/tree/src/tests/mod.rs",
      "target": "prism_common :: { operation :: SignatureBundle , test_transaction_builder :: TestTransactionBuilder }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1411",
      "source": "crates/tree/src/tests/mod.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1412",
      "source": "crates/tree/src/tests/mod.rs",
      "target": "crate :: { hasher :: TreeHasher , key_directory_tree :: KeyDirectoryTree , proofs :: Proof , snarkable_tree :: SnarkableTree , AccountResponse :: * , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1413",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1414",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1415",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1416",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1417",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1418",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1419",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1420",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1421",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1422",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1423",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1424",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1425",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "service_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1426",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1427",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1428",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1429",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1430",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1431",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1432",
      "source": "crates/tree/src/tests/mod.rs#test_insert_and_get",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1433",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1434",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1435",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1436",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1437",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1438",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1439",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1440",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "create_account_with_random_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1441",
      "source": "crates/tree/src/tests/mod.rs#test_insert_for_nonexistent_service_fails",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1442",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1443",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1444",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1445",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1446",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1447",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1448",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1449",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1450",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1451",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1452",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1453",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "create_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1454",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1455",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1456",
      "source": "crates/tree/src/tests/mod.rs#test_insert_with_invalid_service_challenge_fails",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1457",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1458",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1459",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1460",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1461",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1462",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1463",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1464",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1465",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1466",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1467",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1468",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1469",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1470",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1471",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "service_challenge",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1472",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1473",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1474",
      "source": "crates/tree/src/tests/mod.rs#test_insert_duplicate_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1475",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1476",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1477",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1478",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1479",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1480",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1481",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1482",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1483",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1484",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1485",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1486",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1487",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1488",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "add_random_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1489",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1490",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1491",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1492",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1493",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1494",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1495",
      "source": "crates/tree/src/tests/mod.rs#test_update_existing_key",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1496",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1497",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1498",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1499",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1500",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1501",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1502",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1503",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1504",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1505",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1506",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1507",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "add_random_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1508",
      "source": "crates/tree/src/tests/mod.rs#test_update_non_existing_key",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1509",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1510",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1511",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1512",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1513",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1514",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1515",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1516",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1517",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1518",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1519",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1520",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1521",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1522",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "add_internally_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1523",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1524",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1525",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1526",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1527",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "add_randomly_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1528",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1529",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1530",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1531",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1532",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1533",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1534",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1535",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1536",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1537",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "set_randomly_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1538",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1539",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1540",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1541",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1542",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1543",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1544",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1545",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1546",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1547",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "sign",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1548",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1549",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1550",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "add_pre_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1551",
      "source": "crates/tree/src/tests/mod.rs#test_data_ops",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1552",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1553",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1554",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1555",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1556",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1557",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1558",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1559",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1560",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1561",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1562",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1563",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1564",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1565",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1566",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1567",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1568",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1569",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "add_random_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1570",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1571",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1572",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1573",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "add_internally_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1574",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1575",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1576",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1577",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1578",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "add_randomly_signed_data_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1579",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1580",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1581",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1582",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1583",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1584",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1585",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1586",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1587",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1588",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1589",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1590",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1591",
      "source": "crates/tree/src/tests/mod.rs#test_multiple_inserts_and_updates",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1592",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1593",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1594",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1595",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1596",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1597",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1598",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1599",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1600",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1601",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1602",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1603",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1604",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1605",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1606",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1607",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "add_random_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1608",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1609",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1610",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1611",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1612",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1613",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "add_random_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1614",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1615",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1616",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1617",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1618",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1619",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1620",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1621",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1622",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1623",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1624",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1625",
      "source": "crates/tree/src/tests/mod.rs#test_interleaved_inserts_and_updates",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1626",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1627",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1628",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1629",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1630",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1631",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1632",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1633",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1634",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1635",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1636",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1637",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "get_current_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1638",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1639",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1640",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1641",
      "source": "crates/tree/src/tests/mod.rs#test_root_hash_changes",
      "target": "get_current_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1642",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1643",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1644",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1645",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1646",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1647",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1648",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1649",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1650",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1651",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1652",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1653",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1654",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1655",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1656",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1657",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1658",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1659",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1660",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1661",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1662",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1663",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1664",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1665",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1666",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1667",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1668",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1669",
      "source": "crates/tree/src/tests/mod.rs#test_batch_writing",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1670",
      "source": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "target": "KeyDirectoryTree::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1671",
      "source": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1672",
      "source": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "target": "MockTreeStore::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1673",
      "source": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1674",
      "source": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1675",
      "source": "crates/tree/src/tests/mod.rs#test_get_non_existing_key",
      "target": "KeyHash::with",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1676",
      "source": "crates/tree/src/proofs.rs",
      "target": "std :: collections :: HashMap",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1677",
      "source": "crates/tree/src/proofs.rs",
      "target": "anyhow :: { bail , Context , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1678",
      "source": "crates/tree/src/proofs.rs",
      "target": "jmt :: { proof :: { SparseMerkleNode , SparseMerkleProof , UpdateMerkleProof } , KeyHash , RootHash , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1679",
      "source": "crates/tree/src/proofs.rs",
      "target": "prism_common :: { account :: Account , digest :: Digest , operation :: { Operation , ServiceChallenge , ServiceChallengeInput } , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1680",
      "source": "crates/tree/src/proofs.rs",
      "target": "prism_serde :: binary :: ToBinary",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1681",
      "source": "crates/tree/src/proofs.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1682",
      "source": "crates/tree/src/proofs.rs",
      "target": "crate :: hasher :: TreeHasher",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1683",
      "source": "crates/tree/src/proofs.rs#Batch",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1684",
      "source": "crates/tree/src/proofs.rs#Batch",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1685",
      "source": "crates/tree/src/proofs.rs#ServiceProof",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1686",
      "source": "crates/tree/src/proofs.rs#ServiceProof",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1687",
      "source": "crates/tree/src/proofs.rs#Proof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1688",
      "source": "crates/tree/src/proofs.rs#Proof",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1689",
      "source": "crates/tree/src/proofs.rs#Proof",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1690",
      "source": "crates/tree/src/proofs.rs#Proof",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1691",
      "source": "crates/tree/src/proofs.rs#InsertProof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1692",
      "source": "crates/tree/src/proofs.rs#InsertProof",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1693",
      "source": "crates/tree/src/proofs.rs#InsertProof",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1694",
      "source": "crates/tree/src/proofs.rs#InsertProof",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1695",
      "source": "crates/tree/src/proofs.rs#UpdateProof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1696",
      "source": "crates/tree/src/proofs.rs#UpdateProof",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1697",
      "source": "crates/tree/src/proofs.rs#UpdateProof",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1698",
      "source": "crates/tree/src/proofs.rs#UpdateProof",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1699",
      "source": "crates/tree/src/proofs.rs#MerkleProof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1700",
      "source": "crates/tree/src/proofs.rs#MerkleProof",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1701",
      "source": "crates/tree/src/proofs.rs#MerkleProof",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1702",
      "source": "crates/tree/src/proofs.rs#MerkleProof",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1703",
      "source": "crates/tree/src/proofs.rs#HashedMerkleProof",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1704",
      "source": "crates/tree/src/proofs.rs#HashedMerkleProof",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1705",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "std :: collections :: HashSet",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1706",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "anyhow :: { bail , ensure , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1707",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "jmt :: { storage :: { TreeReader , TreeWriter } , KeyHash , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1708",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "tracing :: { debug , warn }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1709",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "prism_errors :: DatabaseError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1710",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "prism_serde :: binary :: { FromBinary , ToBinary }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1711",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "prism_common :: { account :: Account , digest :: Digest , operation :: { Operation , ServiceChallenge , ServiceChallengeInput } , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1712",
      "source": "crates/tree/src/snarkable_tree.rs",
      "target": "crate :: { hasher :: TreeHasher , key_directory_tree :: KeyDirectoryTree , proofs :: { Batch , InsertProof , MerkleProof , Proof , ServiceProof , UpdateProof } , AccountResponse :: { self , * } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1713",
      "source": "crates/tree/src/snarkable_tree.rs#impl_SnarkableTree_KeyDirectoryTree<S>",
      "target": "trait:SnarkableTree",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1714",
      "source": "crates/tree/src/hasher.rs",
      "target": "jmt :: SimpleHasher",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1715",
      "source": "crates/tree/src/hasher.rs",
      "target": "serde :: { ser :: SerializeTupleStruct , Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1716",
      "source": "crates/tree/src/hasher.rs#TreeHasher",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1717",
      "source": "crates/tree/src/hasher.rs#TreeHasher",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1718",
      "source": "crates/tree/src/hasher.rs#TreeHasher",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1719",
      "source": "crates/tree/src/hasher.rs#impl_SimpleHasher_TreeHasher",
      "target": "trait:SimpleHasher",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1720",
      "source": "crates/tree/src/hasher.rs#impl_Serialize_TreeHasher",
      "target": "trait:Serialize",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1721",
      "source": "crates/tree/src/hasher.rs#impl_Deserialize<'de>_TreeHasher",
      "target": "trait:Deserialize",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_1722",
      "source": "crates/tree/src/key_directory_tree.rs",
      "target": "anyhow :: { anyhow , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1723",
      "source": "crates/tree/src/key_directory_tree.rs",
      "target": "jmt :: { self , storage :: { NodeBatch , TreeReader , TreeUpdateBatch , TreeWriter } , JellyfishMerkleTree , KeyHash , RootHash , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1724",
      "source": "crates/tree/src/key_directory_tree.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1725",
      "source": "crates/tree/src/key_directory_tree.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1726",
      "source": "crates/tree/src/key_directory_tree.rs",
      "target": "crate :: hasher :: TreeHasher",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1727",
      "source": "crates/cli/src/cfg.rs",
      "target": "anyhow :: { Context , Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1728",
      "source": "crates/cli/src/cfg.rs",
      "target": "clap :: { Args , Parser , Subcommand , ValueEnum }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1729",
      "source": "crates/cli/src/cfg.rs",
      "target": "config :: { ConfigBuilder , File , builder :: DefaultState }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1730",
      "source": "crates/cli/src/cfg.rs",
      "target": "dirs :: home_dir",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1731",
      "source": "crates/cli/src/cfg.rs",
      "target": "dotenvy :: dotenv",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1732",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_errors :: { DataAvailabilityError , GeneralError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1733",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_keys :: VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1734",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_prover :: { prover :: DEFAULT_MAX_EPOCHLESS_GAP , webserver :: WebServerConfig }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1735",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_serde :: base64 :: FromBase64",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1736",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_storage :: { Database , RedisConnection , database :: StorageBackend , inmemory :: InMemoryDatabase , redis :: RedisConfig , rocksdb :: { RocksDBConfig , RocksDBConnection } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1737",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_telemetry :: config :: { TelemetryConfig , get_default_telemetry_config }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1738",
      "source": "crates/cli/src/cfg.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1739",
      "source": "crates/cli/src/cfg.rs",
      "target": "std :: { fs , path :: Path , str :: FromStr , sync :: Arc , time :: Duration }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1740",
      "source": "crates/cli/src/cfg.rs",
      "target": "tracing :: { error , info , warn }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1741",
      "source": "crates/cli/src/cfg.rs",
      "target": "prism_da :: { DataAvailabilityLayer , LightDataAvailabilityLayer , celestia :: { full_node :: CelestiaConnection , light_client :: LightClientConnection , utils :: { CelestiaConfig , Network , NetworkConfig } , } , consts :: { DA_RETRY_COUNT , DA_RETRY_INTERVAL } , memory :: InMemoryDataAvailabilityLayer , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1742",
      "source": "crates/cli/src/cfg.rs#Commands",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1743",
      "source": "crates/cli/src/cfg.rs#Commands",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1744",
      "source": "crates/cli/src/cfg.rs#Commands",
      "target": "trait:Subcommand",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1745",
      "source": "crates/cli/src/cfg.rs#Commands",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1746",
      "source": "crates/cli/src/cfg.rs#CommandArgs",
      "target": "trait:Args",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1747",
      "source": "crates/cli/src/cfg.rs#CommandArgs",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1748",
      "source": "crates/cli/src/cfg.rs#CommandArgs",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1749",
      "source": "crates/cli/src/cfg.rs#CommandArgs",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1750",
      "source": "crates/cli/src/cfg.rs#Cli",
      "target": "trait:Parser",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1751",
      "source": "crates/cli/src/cfg.rs#Cli",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1752",
      "source": "crates/cli/src/cfg.rs#Cli",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1753",
      "source": "crates/cli/src/cfg.rs#Cli",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1754",
      "source": "crates/cli/src/cfg.rs#CelestiaArgs",
      "target": "trait:Args",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1755",
      "source": "crates/cli/src/cfg.rs#CelestiaArgs",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1756",
      "source": "crates/cli/src/cfg.rs#CelestiaArgs",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1757",
      "source": "crates/cli/src/cfg.rs#CelestiaArgs",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1758",
      "source": "crates/cli/src/cfg.rs#WebserverArgs",
      "target": "trait:Args",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1759",
      "source": "crates/cli/src/cfg.rs#WebserverArgs",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1760",
      "source": "crates/cli/src/cfg.rs#WebserverArgs",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1761",
      "source": "crates/cli/src/cfg.rs#WebserverArgs",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1762",
      "source": "crates/cli/src/cfg.rs#Config",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1763",
      "source": "crates/cli/src/cfg.rs#Config",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1764",
      "source": "crates/cli/src/cfg.rs#Config",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1765",
      "source": "crates/cli/src/cfg.rs#Config",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1766",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1767",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1768",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1769",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1770",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1771",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1772",
      "source": "crates/cli/src/cfg.rs#DALayerOption",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1773",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1774",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:Default",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1775",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1776",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1777",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1778",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1779",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1780",
      "source": "crates/cli/src/cfg.rs#DBValues",
      "target": "trait:ValueEnum",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1781",
      "source": "crates/cli/src/cfg.rs#DatabaseArgs",
      "target": "trait:Args",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1782",
      "source": "crates/cli/src/cfg.rs#DatabaseArgs",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1783",
      "source": "crates/cli/src/cfg.rs#DatabaseArgs",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1784",
      "source": "crates/cli/src/cfg.rs#DatabaseArgs",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_1785",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1786",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "dotenv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1787",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1788",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "crates/cli/src/cfg.rs#get_prism_home",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1789",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1790",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1791",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1792",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1793",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1794",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1795",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "fs::create_dir_all",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1796",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1797",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "build",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1798",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "add_source",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1799",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "ConfigBuilder::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1800",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "File::with_name",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1801",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1802",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "try_deserialize",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1803",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "crates/cli/src/cfg.rs#apply_command_line_args",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1804",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "is_none",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1805",
      "source": "crates/cli/src/cfg.rs#load_config",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1806",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "unwrap_or_else",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1807",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1808",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1809",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "ok_or_else",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1810",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "or_else",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1811",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1812",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1813",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "home_dir",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1814",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1815",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "GeneralError::MissingArgumentError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1816",
      "source": "crates/cli/src/cfg.rs#get_prism_home",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1817",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "exists",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1818",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "Path::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1819",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "parent",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1820",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "Path::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1821",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1822",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "fs::create_dir_all",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1823",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "Config::initialize",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1824",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1825",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "toml::to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1826",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1827",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "fs::write",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1828",
      "source": "crates/cli/src/cfg.rs#ensure_config_file_exists",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1829",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1830",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "config",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1831",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1832",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "crates/cli/src/cfg.rs#get_prism_home",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1833",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1834",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "CelestiaConfig::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1835",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1836",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1837",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1838",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1839",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1840",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1841",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1842",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1843",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1844",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1845",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1846",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1847",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1848",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1849",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1850",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1851",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1852",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1853",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1854",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1855",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "StorageBackend::RocksDB",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1856",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or_else",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1857",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "StorageBackend::Redis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1858",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1859",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1860",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "Network::from_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1861",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1862",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1863",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1864",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "and_then",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1865",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1866",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "VerifyingKey::from_base64",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1867",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1868",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1869",
      "source": "crates/cli/src/cfg.rs#apply_command_line_args",
      "target": "or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1870",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1871",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1872",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "RocksDBConnection::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1873",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "GeneralError::InitializationError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1874",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1875",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1876",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1877",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1878",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1879",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1880",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1881",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1882",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1883",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1884",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "RedisConnection::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1885",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "GeneralError::InitializationError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1886",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1887",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1888",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1889",
      "source": "crates/cli/src/cfg.rs#initialize_db",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1890",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "context",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1891",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1892",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "CelestiaConnection::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1893",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1894",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1895",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "Err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1896",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1897",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "DataAvailabilityError::NetworkError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1898",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1899",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "InMemoryDataAvailabilityLayer::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1900",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1901",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1902",
      "source": "crates/cli/src/cfg.rs#initialize_da_layer",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1903",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "LightClientConnection::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1904",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "Err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1905",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1906",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1907",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "InMemoryDataAvailabilityLayer::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1908",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1909",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1910",
      "source": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1911",
      "source": "crates/cli/src/main.rs",
      "target": "cfg :: { Cli , Commands , initialize_da_layer , initialize_db , initialize_light_da_layer , load_config , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1912",
      "source": "crates/cli/src/main.rs",
      "target": "clap :: Parser",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1913",
      "source": "crates/cli/src/main.rs",
      "target": "keystore_rs :: { FileStore , KeyChain , KeyStore }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1914",
      "source": "crates/cli/src/main.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1915",
      "source": "crates/cli/src/main.rs",
      "target": "prism_serde :: base64 :: ToBase64",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1916",
      "source": "crates/cli/src/main.rs",
      "target": "prism_telemetry :: telemetry :: shutdown_telemetry",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1917",
      "source": "crates/cli/src/main.rs",
      "target": "prism_telemetry_registry :: { init :: init , metrics_registry :: get_metrics }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1918",
      "source": "crates/cli/src/main.rs",
      "target": "std :: io :: { Error , ErrorKind }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1919",
      "source": "crates/cli/src/main.rs",
      "target": "node_types :: NodeType",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1920",
      "source": "crates/cli/src/main.rs",
      "target": "prism_lightclient :: { LightClient , events :: EventChannel }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1921",
      "source": "crates/cli/src/main.rs",
      "target": "prism_prover :: Prover",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1922",
      "source": "crates/cli/src/main.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1923",
      "source": "crates/cli/src/main.rs",
      "target": "tokio_util :: sync :: CancellationToken",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1924",
      "source": "crates/cli/src/main.rs",
      "target": "tracing :: { error , info }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_1925",
      "source": "crates/cli/src/main.rs#main",
      "target": "Cli::parse",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1926",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1927",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1928",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/cfg.rs#load_config",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1929",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1930",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1931",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1932",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1933",
      "source": "crates/cli/src/main.rs#main",
      "target": "Err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1934",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1935",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1936",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1937",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1938",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1939",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1940",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1941",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/telemetry/src/init.rs#init",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1942",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1943",
      "source": "crates/cli/src/main.rs#main",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1944",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1945",
      "source": "crates/cli/src/main.rs#main",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1946",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/telemetry/src/metrics_registry.rs#get_metrics",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1947",
      "source": "crates/cli/src/main.rs#main",
      "target": "record_node_info",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1948",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1949",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1950",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/cfg.rs#initialize_light_da_layer",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1951",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1952",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1953",
      "source": "crates/cli/src/main.rs#main",
      "target": "EventChannel::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1954",
      "source": "crates/cli/src/main.rs#main",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1955",
      "source": "crates/cli/src/main.rs#main",
      "target": "LightClient::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1956",
      "source": "crates/cli/src/main.rs#main",
      "target": "publisher",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1957",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1958",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/cfg.rs#initialize_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1959",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1960",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1961",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1962",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/cfg.rs#initialize_da_layer",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1963",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1964",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1965",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/main.rs#get_signing_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1966",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1967",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1968",
      "source": "crates/cli/src/main.rs#main",
      "target": "verifying_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1969",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1970",
      "source": "crates/cli/src/main.rs#main",
      "target": "std::env::var",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1971",
      "source": "crates/cli/src/main.rs#main",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1972",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1973",
      "source": "crates/cli/src/main.rs#main",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1974",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1975",
      "source": "crates/cli/src/main.rs#main",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1976",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1977",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1978",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1979",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1980",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/cfg.rs#initialize_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1981",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1982",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1983",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1984",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/cfg.rs#initialize_da_layer",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1985",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1986",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1987",
      "source": "crates/cli/src/main.rs#main",
      "target": "crates/cli/src/main.rs#get_signing_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1988",
      "source": "crates/cli/src/main.rs#main",
      "target": "ok_or_else",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1989",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1990",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1991",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1992",
      "source": "crates/cli/src/main.rs#main",
      "target": "std::env::var",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1993",
      "source": "crates/cli/src/main.rs#main",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1994",
      "source": "crates/cli/src/main.rs#main",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1995",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1996",
      "source": "crates/cli/src/main.rs#main",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1997",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1998",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_1999",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2000",
      "source": "crates/cli/src/main.rs#main",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2001",
      "source": "crates/cli/src/main.rs#main",
      "target": "tokio::spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2002",
      "source": "crates/cli/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2003",
      "source": "crates/cli/src/main.rs#main",
      "target": "signal",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2004",
      "source": "crates/cli/src/main.rs#main",
      "target": "SignalKind::interrupt",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2005",
      "source": "crates/cli/src/main.rs#main",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2006",
      "source": "crates/cli/src/main.rs#main",
      "target": "signal",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2007",
      "source": "crates/cli/src/main.rs#main",
      "target": "SignalKind::terminate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2008",
      "source": "crates/cli/src/main.rs#main",
      "target": "cancel",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2009",
      "source": "crates/cli/src/main.rs#main",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2010",
      "source": "crates/cli/src/main.rs#main",
      "target": "start",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2011",
      "source": "crates/cli/src/main.rs#main",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2012",
      "source": "crates/cli/src/main.rs#main",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2013",
      "source": "crates/cli/src/main.rs#main",
      "target": "shutdown_telemetry",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2014",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "as_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2015",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2016",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2017",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "FileStore::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2018",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2019",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2020",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2021",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2022",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2023",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2024",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Error::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2025",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2026",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "get_or_create_signing_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2027",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2028",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2029",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "SigningKey::from_algorithm_and_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2030",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "as_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2031",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2032",
      "source": "crates/cli/src/main.rs#get_signing_key",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2033",
      "source": "crates/cli/src/node_types.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2034",
      "source": "crates/cli/src/node_types.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2035",
      "source": "crates/cli/src/node_types.rs",
      "target": "std :: { self , sync :: Arc }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2036",
      "source": "crates/cli/src/node_types.rs#impl_NodeType_prism_prover::Prover",
      "target": "trait:NodeType",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2037",
      "source": "crates/cli/src/node_types.rs#impl_NodeType_prism_lightclient::LightClient",
      "target": "trait:NodeType",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2038",
      "source": "crates/telemetry/src/metrics_registry.rs",
      "target": "lazy_static :: lazy_static",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2039",
      "source": "crates/telemetry/src/metrics_registry.rs",
      "target": "opentelemetry :: { global , metrics :: { Gauge , Meter } }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2040",
      "source": "crates/telemetry/src/metrics_registry.rs",
      "target": "parking_lot :: Mutex",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2041",
      "source": "crates/telemetry/src/metrics_registry.rs",
      "target": "tracing :: info",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2042",
      "source": "crates/telemetry/src/metrics_registry.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2043",
      "source": "crates/telemetry/src/metrics_registry.rs",
      "target": "prism_telemetry :: telemetry :: build_attributes",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2044",
      "source": "crates/telemetry/src/metrics_registry.rs#PrismMetrics",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2045",
      "source": "crates/telemetry/src/metrics_registry.rs#impl_Default_PrismMetrics",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2046",
      "source": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "target": "lock",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2047",
      "source": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "target": "is_none",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2048",
      "source": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2049",
      "source": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2050",
      "source": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "target": "PrismMetrics::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2051",
      "source": "crates/telemetry/src/metrics_registry.rs#get_metrics",
      "target": "try_lock",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2052",
      "source": "crates/telemetry/src/metrics_registry.rs#get_metrics",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2053",
      "source": "crates/telemetry/src/init.rs",
      "target": "std :: io :: Error",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2054",
      "source": "crates/telemetry/src/init.rs",
      "target": "crate :: metrics_registry :: init_metrics_registry",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2055",
      "source": "crates/telemetry/src/init.rs",
      "target": "opentelemetry :: global :: { self }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2056",
      "source": "crates/telemetry/src/init.rs",
      "target": "opentelemetry_sdk :: logs :: SdkLoggerProvider",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2057",
      "source": "crates/telemetry/src/init.rs",
      "target": "opentelemetry_sdk :: metrics :: SdkMeterProvider",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2058",
      "source": "crates/telemetry/src/init.rs",
      "target": "prism_telemetry :: telemetry :: { init_telemetry , build_resource , set_global_attributes }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2059",
      "source": "crates/telemetry/src/init.rs",
      "target": "prism_telemetry :: logs :: setup_log_subscriber",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2060",
      "source": "crates/telemetry/src/init.rs",
      "target": "prism_telemetry :: config :: TelemetryConfig",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2061",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2062",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "extend",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2063",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2064",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "set_global_attributes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2065",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2066",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "build_resource",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2067",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2068",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "map_err",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2069",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "init_telemetry",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2070",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "Error::other",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2071",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "setup_log_subscriber",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2072",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "as_ref",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2073",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "global::set_meter_provider",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2074",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2075",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "crates/telemetry/src/metrics_registry.rs#init_metrics_registry",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2076",
      "source": "crates/telemetry/src/init.rs#init",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2077",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2078",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "lumina_node :: events :: NodeEvent",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2079",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2080",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "prism_da :: { FinalizedEpoch , LightDataAvailabilityLayer }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2081",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "prism_keys :: VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2082",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "prism_telemetry_registry :: metrics_registry :: get_metrics",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2083",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "serde :: Deserialize",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2084",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "std :: { self , future :: Future , sync :: Arc }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2085",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "tokio :: sync :: RwLock",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2086",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "tracing :: { error , info }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2087",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "sp1_verifier :: Groth16Verifier",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2088",
      "source": "crates/node_types/lightclient/src/lightclient.rs",
      "target": "crate :: events :: { EventPublisher , LightClientEvent }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2089",
      "source": "crates/node_types/lightclient/src/lightclient.rs#spawn_task",
      "target": "wasm_bindgen_futures::spawn_local",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2090",
      "source": "crates/node_types/lightclient/src/lightclient.rs#spawn_task",
      "target": "tokio::spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2091",
      "source": "crates/node_types/lightclient/src/lightclient.rs#VerificationKeys",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2092",
      "source": "crates/node_types/lightclient/src/lightclient.rs#load_sp1_verifying_keys",
      "target": "serde_json::from_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2093",
      "source": "crates/node_types/lightclient/src/lightclient.rs#load_sp1_verifying_keys",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2094",
      "source": "crates/node_types/lightclient/src/events.rs",
      "target": "lumina_node :: events :: NodeEvent",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2095",
      "source": "crates/node_types/lightclient/src/events.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2096",
      "source": "crates/node_types/lightclient/src/events.rs",
      "target": "serde :: Serialize",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2097",
      "source": "crates/node_types/lightclient/src/events.rs",
      "target": "std :: fmt",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2098",
      "source": "crates/node_types/lightclient/src/events.rs",
      "target": "tokio :: sync :: broadcast",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2099",
      "source": "crates/node_types/lightclient/src/events.rs",
      "target": "web_time :: SystemTime",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2100",
      "source": "crates/node_types/lightclient/src/events.rs#LightClientEvent",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2101",
      "source": "crates/node_types/lightclient/src/events.rs#LightClientEvent",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2102",
      "source": "crates/node_types/lightclient/src/events.rs#LightClientEvent",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2103",
      "source": "crates/node_types/lightclient/src/events.rs#impl_fmt::Display_LightClientEvent",
      "target": "trait:fmt::Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2104",
      "source": "crates/node_types/lightclient/src/events.rs#EventInfo",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2105",
      "source": "crates/node_types/lightclient/src/events.rs#EventInfo",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2106",
      "source": "crates/node_types/lightclient/src/events.rs#EventInfo",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2107",
      "source": "crates/node_types/lightclient/src/events.rs#EventChannel",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2108",
      "source": "crates/node_types/lightclient/src/events.rs#impl_Default_EventChannel",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2109",
      "source": "crates/node_types/lightclient/src/events.rs#EventPublisher",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2110",
      "source": "crates/node_types/lightclient/src/events.rs#EventPublisher",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2111",
      "source": "crates/node_types/lightclient/src/events.rs#EventSubscriber",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2112",
      "source": "crates/node_types/lightclient/src/lib.rs",
      "target": "lightclient :: LightClient",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2113",
      "source": "crates/node_types/uniffi-lightclient/src/types.rs",
      "target": "prism_lightclient :: events :: LightClientEvent",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2114",
      "source": "crates/node_types/uniffi-lightclient/src/types.rs#UniffiLightClientEvent",
      "target": "trait:uniffi",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2115",
      "source": "crates/node_types/uniffi-lightclient/src/types.rs#UniffiLightClientEvent",
      "target": "trait:Enum",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2116",
      "source": "crates/node_types/uniffi-lightclient/src/types.rs#impl_From<LightClientEvent>_UniffiLightClientEvent",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2117",
      "source": "crates/node_types/uniffi-lightclient/src/bin/uniffi-bindgen.rs#main",
      "target": "uniffi::uniffi_bindgen_main",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2118",
      "source": "crates/node_types/uniffi-lightclient/src/error.rs",
      "target": "thiserror :: Error",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2119",
      "source": "crates/node_types/uniffi-lightclient/src/error.rs#LightClientError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2120",
      "source": "crates/node_types/uniffi-lightclient/src/error.rs#LightClientError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2121",
      "source": "crates/node_types/uniffi-lightclient/src/error.rs#LightClientError",
      "target": "trait:uniffi",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2122",
      "source": "crates/node_types/uniffi-lightclient/src/error.rs#LightClientError",
      "target": "trait:Error",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2123",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "error :: { LightClientError , Result }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2124",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "prism_da :: celestia :: { light_client :: LightClientConnection , utils :: Network }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2125",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "prism_lightclient :: { LightClient as CoreLightClient , events :: { EventChannel , EventSubscriber } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2126",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "std :: { str :: FromStr , sync :: Arc }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2127",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "tokio :: sync :: Mutex",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2128",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "types :: UniffiLightClientEvent",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2129",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs",
      "target": "uniffi :: Object",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2130",
      "source": "crates/node_types/uniffi-lightclient/src/lib.rs#LightClient",
      "target": "trait:Object",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2131",
      "source": "crates/node_types/prover/src/tx_buffer.rs",
      "target": "prism_common :: transaction :: Transaction",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2132",
      "source": "crates/node_types/prover/src/tx_buffer.rs",
      "target": "std :: collections :: BTreeMap",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2133",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "crate :: Prover",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2134",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "anyhow :: { Result , bail }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2135",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "axum :: { Json , extract :: State , http :: StatusCode , response :: IntoResponse }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2136",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "prism_common :: { api :: { PrismApi , types :: { AccountRequest , AccountResponse , CommitmentResponse } , } , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2137",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2138",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "std :: { net :: SocketAddr , sync :: Arc }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2139",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "tokio :: net :: TcpListener",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2140",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "tokio_util :: sync :: CancellationToken",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2141",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "tower_http :: cors :: CorsLayer",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2142",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "utoipa :: { OpenApi , openapi :: { Info , OpenApiBuilder } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2143",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "utoipa_axum :: { router :: OpenApiRouter , routes }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2144",
      "source": "crates/node_types/prover/src/webserver.rs",
      "target": "utoipa_swagger_ui :: SwaggerUi",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2145",
      "source": "crates/node_types/prover/src/webserver.rs#WebServerConfig",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2146",
      "source": "crates/node_types/prover/src/webserver.rs#WebServerConfig",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2147",
      "source": "crates/node_types/prover/src/webserver.rs#WebServerConfig",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2148",
      "source": "crates/node_types/prover/src/webserver.rs#WebServerConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2149",
      "source": "crates/node_types/prover/src/webserver.rs#impl_Default_WebServerConfig",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2150",
      "source": "crates/node_types/prover/src/webserver.rs#ApiDoc",
      "target": "trait:OpenApi",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2151",
      "source": "crates/node_types/prover/src/webserver.rs#post_transaction",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2152",
      "source": "crates/node_types/prover/src/webserver.rs#post_transaction",
      "target": "into_response",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2153",
      "source": "crates/node_types/prover/src/webserver.rs#post_transaction",
      "target": "into_response",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2154",
      "source": "crates/node_types/prover/src/webserver.rs#get_account",
      "target": "crates/node_types/prover/src/webserver.rs#get_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2155",
      "source": "crates/node_types/prover/src/webserver.rs#get_account",
      "target": "into_response",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2156",
      "source": "crates/node_types/prover/src/webserver.rs#get_account",
      "target": "into_response",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2157",
      "source": "crates/node_types/prover/src/webserver.rs#get_account",
      "target": "Json",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2158",
      "source": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2159",
      "source": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "target": "into_response",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2160",
      "source": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "target": "Json",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2161",
      "source": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "target": "into_response",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2162",
      "source": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2163",
      "source": "crates/node_types/prover/src/lib.rs",
      "target": "prover :: { Config , Prover , ProverEngineConfig , SequencerConfig , SyncerConfig }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2164",
      "source": "crates/node_types/prover/src/lib.rs",
      "target": "webserver :: WebServerConfig",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2165",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "anyhow :: { Context , Result , bail }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2166",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "jmt :: KeyHash",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2167",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "prism_common :: { account :: Account , digest :: Digest , operation :: Operation , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2168",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "prism_da :: { DataAvailabilityLayer , FinalizedEpoch }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2169",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "prism_keys :: SigningKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2170",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "prism_storage :: database :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2171",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "prism_tree :: { AccountResponse :: * , hasher :: TreeHasher , key_directory_tree :: KeyDirectoryTree , proofs :: Proof , snarkable_tree :: SnarkableTree , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2172",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2173",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "tokio :: sync :: RwLock",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2174",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "tokio_util :: sync :: CancellationToken",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2175",
      "source": "crates/node_types/prover/src/sequencer.rs",
      "target": "crate :: prover_engine :: ProverEngine",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2176",
      "source": "crates/node_types/prover/src/sequencer.rs#Sequencer",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2177",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "anyhow :: { Context , Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2178",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "prism_common :: transaction :: Transaction",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2179",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "prism_da :: { DataAvailabilityLayer , FinalizedEpoch }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2180",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "prism_keys :: VerifyingKey",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2181",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "prism_storage :: database :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2182",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "prism_telemetry_registry :: metrics_registry :: get_metrics",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2183",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2184",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "tokio :: sync :: { RwLock , broadcast }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2185",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "tokio_util :: sync :: CancellationToken",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2186",
      "source": "crates/node_types/prover/src/syncer.rs",
      "target": "crate :: { prover_engine :: ProverEngine , sequencer :: Sequencer , tx_buffer :: TxBuffer }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2187",
      "source": "crates/node_types/prover/src/syncer.rs#Syncer",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2188",
      "source": "crates/node_types/prover/src/prover/timer.rs",
      "target": "std :: { future :: Future , time :: Duration }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2189",
      "source": "crates/node_types/prover/src/prover/timer.rs",
      "target": "prism_common :: api :: PrismApiTimer",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2190",
      "source": "crates/node_types/prover/src/prover/timer.rs#impl_PrismApiTimer_ProverTokioTimer",
      "target": "trait:PrismApiTimer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2191",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "super :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2192",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "prism_common :: test_transaction_builder :: TestTransactionBuilder",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2193",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2194",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "prism_tree :: proofs :: Proof",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2195",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "std :: { self , sync :: Arc , time :: Duration }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2196",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "tokio :: spawn",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2197",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "tokio_util :: sync :: CancellationToken",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2198",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "prism_da :: memory :: InMemoryDataAvailabilityLayer",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2199",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs",
      "target": "prism_storage :: inmemory :: InMemoryDatabase",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2200",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "InMemoryDataAvailabilityLayer::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2201",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2202",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2203",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2204",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2205",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2206",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2207",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Config::default_with_key_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2208",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2209",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2210",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2211",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2212",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2213",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2214",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2215",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2216",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2217",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2218",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2219",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "subscribe_to_heights",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2220",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "get_da",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2221",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2222",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2223",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2224",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2225",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2226",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2227",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2228",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "finalize_new_epoch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2229",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2230",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2231",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2232",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2233",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2234",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "get_finalized_epoch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2235",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "get_da",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2236",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2237",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "first",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2238",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2239",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2240",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "read",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2241",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2242",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2243",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2244",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "get_finalized_epoch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2245",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "get_da",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2246",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2247",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_posts_epoch_after_max_gap",
      "target": "first",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2248",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2249",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2250",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2251",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2252",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2253",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2254",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2255",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2256",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2257",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2258",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2259",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2260",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "get_pending_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2261",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_validate_and_queue_update",
      "target": "read",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2262",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2263",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2264",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2265",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "register_service_with_random_keys",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2266",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2267",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "create_account_with_random_key_signed",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2268",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2269",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2270",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2271",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2272",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2273",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2274",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2275",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2276",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "add_key_verified_with_root",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2277",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2278",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2279",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2280",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2281",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "commit",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2282",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "revoke_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2283",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2284",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "cloned",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2285",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "get_public_key",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2286",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2287",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_process_transactions",
      "target": "process_transaction",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2288",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2289",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "TestTransactionBuilder::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2290",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "expect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2291",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "SigningKey::new_with_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2292",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "into",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2293",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2294",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2295",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block_with_invalid_tx",
      "target": "execute_block",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2296",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2297",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2298",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2299",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2300",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_execute_block",
      "target": "execute_block",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2301",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_test_prover",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2302",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2303",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2304",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2305",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2306",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2307",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "finalize_new_epoch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2308",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2309",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_finalize_new_epoch",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2310",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "InMemoryDataAvailabilityLayer::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2311",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2312",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2313",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2314",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2315",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2316",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2317",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2318",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2319",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2320",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Config::default_with_key_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2321",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2322",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2323",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2324",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2325",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2326",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2327",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2328",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2329",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2330",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2331",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2332",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2333",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2334",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2335",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2336",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2337",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2338",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2339",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2340",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2341",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2342",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2343",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2344",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2345",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2346",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2347",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "get_latest_epoch_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2348",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "get_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2349",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "is_ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2350",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2351",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2352",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_restart_sync_from_scratch",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2353",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "InMemoryDataAvailabilityLayer::new_with_epoch_delay",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2354",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2355",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Duration::from_secs",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2356",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2357",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2358",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2359",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2360",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2361",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Config::default_with_key_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2362",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2363",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2364",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2365",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2366",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2367",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2368",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2369",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2370",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2371",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2372",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Config::default_with_key_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2373",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2374",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2375",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2376",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2377",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2378",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2379",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2380",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2381",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2382",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2383",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2384",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2385",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2386",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2387",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2388",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2389",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2390",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2391",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_last_synced_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2392",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2393",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2394",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_last_synced_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2395",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2396",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2397",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_latest_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2398",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2399",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2400",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2401",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2402",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "split_at",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2403",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2404",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "submit_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2405",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2406",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2407",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2408",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "submit_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2409",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2410",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2411",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "tokio::time::sleep",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2412",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2413",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2414",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2415",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2416",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2417",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2418",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_latest_epoch_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2419",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2420",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2421",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_latest_epoch_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2422",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_prover_fullnode_commitment_sync_with_racing_transactions",
      "target": "get_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2423",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "InMemoryDataAvailabilityLayer::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2424",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Duration::from_millis",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2425",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2426",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2427",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Box::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2428",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "InMemoryDatabase::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2429",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2430",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Config::default_with_key_algorithm",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2431",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2432",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2433",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2434",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2435",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2436",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2437",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2438",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2439",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2440",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2441",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "crates/node_types/prover/src/prover/tests/mod.rs#create_mock_transactions",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2442",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2443",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2444",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "validate_and_queue_update",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2445",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "recv",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2446",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "is_empty",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2447",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Arc::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2448",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2449",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "Prover::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2450",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2451",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2452",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "CancellationToken::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2453",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2454",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "spawn",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2455",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2456",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "run",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2457",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2458",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "get_latest_epoch_height",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2459",
      "source": "crates/node_types/prover/src/prover/tests/mod.rs#test_load_persisted_state",
      "target": "get_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2460",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "anyhow :: { Context , Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2461",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2462",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "prism_common :: { api :: { PendingTransaction , PendingTransactionImpl , PrismApi , PrismApiError , types :: { AccountResponse , CommitmentResponse , HashedMerkleProof } , } , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2463",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "prism_keys :: { CryptoAlgorithm , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2464",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "prism_storage :: database :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2465",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "prism_tree :: AccountResponse :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2466",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2467",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "timer :: ProverTokioTimer",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2468",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "tokio :: { sync :: RwLock , task :: JoinSet }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2469",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "tokio_util :: sync :: CancellationToken",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2470",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "crate :: { prover_engine :: ProverEngine , sequencer :: Sequencer , syncer :: Syncer , webserver :: { WebServer , WebServerConfig } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2471",
      "source": "crates/node_types/prover/src/prover/mod.rs",
      "target": "prism_da :: DataAvailabilityLayer",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2472",
      "source": "crates/node_types/prover/src/prover/mod.rs#SyncerConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2473",
      "source": "crates/node_types/prover/src/prover/mod.rs#SequencerConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2474",
      "source": "crates/node_types/prover/src/prover/mod.rs#ProverEngineConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2475",
      "source": "crates/node_types/prover/src/prover/mod.rs#Config",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2476",
      "source": "crates/node_types/prover/src/prover/mod.rs#impl_Default_Config",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2477",
      "source": "crates/node_types/prover/src/prover/mod.rs#impl_PrismApi_Prover",
      "target": "trait:PrismApi",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2478",
      "source": "crates/node_types/prover/src/prover_engine.rs",
      "target": "anyhow :: { Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2479",
      "source": "crates/node_types/prover/src/prover_engine.rs",
      "target": "prism_storage :: database :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2480",
      "source": "crates/node_types/prover/src/prover_engine.rs",
      "target": "prism_tree :: proofs :: Batch",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2481",
      "source": "crates/node_types/prover/src/prover_engine.rs",
      "target": "sp1_sdk :: { EnvProver , HashableKey as _ , ProverClient , SP1Proof , SP1ProofWithPublicValues , SP1ProvingKey , SP1Stdin , SP1VerifyingKey , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2482",
      "source": "crates/node_types/prover/src/prover_engine.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2483",
      "source": "crates/node_types/prover/src/prover_engine.rs",
      "target": "tokio :: sync :: RwLock",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2484",
      "source": "crates/node_types/prover/src/prover_engine.rs#ProverEngine",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2485",
      "source": "crates/zk/nova/src/batch.rs",
      "target": "super :: { insert :: InsertCircuit , update :: UpdateCircuit }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2486",
      "source": "crates/zk/nova/src/batch.rs",
      "target": "arecibo :: { supernova :: { StepCircuit , TrivialSecondaryCircuit } , traits :: { CurveCycleEquipped , Dual , Engine } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2487",
      "source": "crates/zk/nova/src/batch.rs",
      "target": "ff :: { PrimeField , PrimeFieldBits }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2488",
      "source": "crates/zk/nova/src/batch.rs",
      "target": "prism_common :: tree :: { InsertProof , UpdateProof }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2489",
      "source": "crates/zk/nova/src/batch.rs",
      "target": "std :: cell :: RefCell",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2490",
      "source": "crates/zk/nova/src/batch.rs#EpochCircuitSequence",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2491",
      "source": "crates/zk/nova/src/batch.rs#impl_arecibo::supernova::NonUniformCircuit<E1>_EpochCircuitSequence<E1>",
      "target": "trait:arecibo::supernova::NonUniformCircuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2492",
      "source": "crates/zk/nova/src/batch.rs#EpochCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2493",
      "source": "crates/zk/nova/src/batch.rs#impl_StepCircuit<F>_EpochCircuit<F>",
      "target": "trait:StepCircuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2494",
      "source": "crates/zk/nova/src/update.rs",
      "target": "crate :: utils :: { allocate_bits_to_binary_number , next_rom_index_and_pc , verify_membership_proof , Digest as NovaDigest , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2495",
      "source": "crates/zk/nova/src/update.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2496",
      "source": "crates/zk/nova/src/update.rs",
      "target": "arecibo :: supernova :: StepCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2497",
      "source": "crates/zk/nova/src/update.rs",
      "target": "bellpepper_core :: { num :: AllocatedNum , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2498",
      "source": "crates/zk/nova/src/update.rs",
      "target": "ff :: { PrimeField , PrimeFieldBits }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2499",
      "source": "crates/zk/nova/src/update.rs",
      "target": "prism_common :: tree :: UpdateProof",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2500",
      "source": "crates/zk/nova/src/update.rs#UpdateCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2501",
      "source": "crates/zk/nova/src/update.rs#impl_StepCircuit<F>_UpdateCircuit<F>",
      "target": "trait:StepCircuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2502",
      "source": "crates/zk/nova/src/insert.rs",
      "target": "crate :: utils :: { allocate_bits_to_binary_number , next_rom_index_and_pc , verify_membership_proof , Digest , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2503",
      "source": "crates/zk/nova/src/insert.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2504",
      "source": "crates/zk/nova/src/insert.rs",
      "target": "arecibo :: supernova :: StepCircuit",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2505",
      "source": "crates/zk/nova/src/insert.rs",
      "target": "bellpepper_core :: { num :: AllocatedNum , ConstraintSystem , SynthesisError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2506",
      "source": "crates/zk/nova/src/insert.rs",
      "target": "ff :: { PrimeField , PrimeFieldBits }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2507",
      "source": "crates/zk/nova/src/insert.rs",
      "target": "prism_common :: tree :: InsertProof",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2508",
      "source": "crates/zk/nova/src/insert.rs#InsertCircuit",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2509",
      "source": "crates/zk/nova/src/insert.rs#impl_StepCircuit<Scalar>_InsertCircuit<Scalar>",
      "target": "trait:StepCircuit",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2510",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "crate :: batch :: { EpochCircuit , EpochCircuitSequence }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2511",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2512",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "arecibo :: { provider :: PallasEngine , supernova :: PublicParams , traits :: snark :: default_ck_hint }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2513",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "bellpepper :: gadgets :: sha256 :: sha256",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2514",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "bellpepper_core :: { boolean :: { AllocatedBit , Boolean } , num :: AllocatedNum , ConstraintSystem , LinearCombination , SynthesisError , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2515",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "ff :: PrimeField",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2516",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "itertools :: Itertools as _",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2517",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "jmt :: { bytes32ext :: Bytes32Ext , proof :: { SparseMerkleLeafNode , SparseMerkleNode , SparseMerkleProof , INTERNAL_DOMAIN_SEPARATOR } , RootHash , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2518",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "prism_common :: { test_utils :: TestTreeState , tree :: * }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2519",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "std :: marker :: PhantomData",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2520",
      "source": "crates/zk/nova/src/utils.rs",
      "target": "prism_common :: tree",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2521",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2522",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2523",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2524",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "zip_eq",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2525",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2526",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2527",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2528",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "lc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2529",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2530",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get_variable",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2531",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get_variable",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2532",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "unwrap_or_default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2533",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "position",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2534",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2535",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "is_some_and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2536",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2537",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "AllocatedNum::alloc_infallible",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2538",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2539",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "F::from",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2540",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2541",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get_variable",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2542",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2543",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get_variable",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2544",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "AllocatedNum::alloc_infallible",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2545",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2546",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2547",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "and_then",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2548",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2549",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "get_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2550",
      "source": "crates/zk/nova/src/utils.rs#next_rom_index_and_pc",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2551",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2552",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2553",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2554",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "Boolean::Is",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2555",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "AllocatedBit::alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2556",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2557",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2558",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "get_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2559",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "F::from",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2560",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "fold",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2561",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2562",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "LinearCombination::zero",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2563",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "lc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2564",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2565",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2566",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2567",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2568",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "fold",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2569",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2570",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2571",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "LinearCombination::zero",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2572",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "lc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2573",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "CS::one",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2574",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "F::from",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2575",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "enforce",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2576",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "get_variable",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2577",
      "source": "crates/zk/nova/src/utils.rs#get_selector_vec_from_index",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2578",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "TestTreeState::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2579",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "register_service",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2580",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2581",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "create_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2582",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2583",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2584",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2585",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "insert",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2586",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2587",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2588",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "insert",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2589",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2590",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2591",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "add_key_to_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2592",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2593",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "update_account",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2594",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "EpochCircuitSequence::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2595",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "PublicParams::setup",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2596",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "default_ck_hint",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2597",
      "source": "crates/zk/nova/src/utils.rs#create_pp",
      "target": "default_ck_hint",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2598",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2599",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "flat_map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2600",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2601",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2602",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "rev",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2603",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2604",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2605",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2606",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "into_iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2607",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "AllocatedBit::alloc",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2608",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2609",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "Some",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2610",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2611",
      "source": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "target": "Boolean::from",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2612",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2613",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "to_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2614",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "sha256",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2615",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2616",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2617",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "to_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2618",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "sha256",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2619",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2620",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2621",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2622",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "to_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2623",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "sha256",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2624",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2625",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "concat",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2626",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2627",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2628",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2629",
      "source": "crates/zk/nova/src/utils.rs#hash_node",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2630",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2631",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "siblings",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2632",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "crates/zk/nova/src/utils.rs#hash_node",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2633",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "SparseMerkleNode::Leaf",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2634",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2635",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "crates/zk/nova/src/utils.rs#hash_node",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2636",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "siblings",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2637",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2638",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2639",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "to_bytes",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2640",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "sha256",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2641",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2642",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "concat",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2643",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2644",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2645",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2646",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2647",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "nth",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2648",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "rev",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2649",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "iter_bits",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2650",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "crates/zk/nova/src/utils.rs#allocate_bits_to_binary_number",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2651",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "to_vec",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2652",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "Vec::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2653",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "extend_from_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2654",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "extend_from_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2655",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "extend_from_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2656",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "extend_from_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2657",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "extend_from_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2658",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "extend_from_slice",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2659",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "sha256",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2660",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2661",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2662",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2663",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2664",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2665",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "Boolean::enforce_equal",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2666",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2667",
      "source": "crates/zk/nova/src/utils.rs#verify_membership_proof",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2668",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Vec::with_capacity",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2669",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2670",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Vec::with_capacity",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2671",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2672",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2673",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2674",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2675",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Boolean::and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2676",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2677",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Boolean::and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2678",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2679",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "not",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2680",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Boolean::xor",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2681",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2682",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Boolean::and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2683",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2684",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Boolean::and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2685",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2686",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "not",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2687",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Boolean::xor",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2688",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2689",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2690",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2691",
      "source": "crates/zk/nova/src/utils.rs#conditionally_swap",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2692",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "Vec::with_capacity",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2693",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "len",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2694",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2695",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "zip",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2696",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2697",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2698",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2699",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "Boolean::and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2700",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2701",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "Boolean::and",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2702",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2703",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "Boolean::not",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2704",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "Boolean::xor",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2705",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "namespace",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2706",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "push",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2707",
      "source": "crates/zk/nova/src/utils.rs#conditionally_select_vector",
      "target": "Ok",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2708",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2709",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2710",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2711",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "unwrap_or",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2712",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "get_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2713",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "collect",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2714",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "map",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2715",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "chunks",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2716",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "fold",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2717",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "enumerate",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2718",
      "source": "crates/zk/nova/src/utils.rs#boolvec_to_bytes",
      "target": "iter",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2719",
      "source": "crates/client/src/lib.rs",
      "target": "http_client :: { PrismHttpClient , PrismHttpClientError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2720",
      "source": "crates/client/src/lib.rs",
      "target": "prism_common :: { account :: Account , api :: { PendingTransaction , PrismApi , PrismApiError , types :: * } , builder , digest :: Digest , operation :: { ServiceChallenge , ServiceChallengeInput , SignatureBundle } , transaction :: { Transaction , TransactionError , UnsignedTransaction } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2721",
      "source": "crates/client/src/lib.rs",
      "target": "prism_keys :: { CryptoAlgorithm , Signature , SigningKey , VerifyingKey }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2722",
      "source": "crates/client/src/lib.rs",
      "target": "prism_serde :: binary",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2723",
      "source": "crates/client/src/lib.rs",
      "target": "prism_common :: api :: mock",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2724",
      "source": "crates/client/src/prism_api.rs",
      "target": "std :: { future :: Future , time :: Duration }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2725",
      "source": "crates/client/src/prism_api.rs",
      "target": "async_trait :: async_trait",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2726",
      "source": "crates/client/src/prism_api.rs",
      "target": "prism_common :: { api :: { types :: { AccountRequest , AccountResponse , CommitmentResponse } , PendingTransaction , PendingTransactionImpl , PrismApi , PrismApiError , PrismApiTimer , } , transaction :: Transaction , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2727",
      "source": "crates/client/src/prism_api.rs",
      "target": "crate :: { PrismHttpClient , PrismHttpClientError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2728",
      "source": "crates/client/src/prism_api.rs#impl_PrismApiTimer_PrismHttpTokioTimer",
      "target": "trait:PrismApiTimer",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2729",
      "source": "crates/client/src/prism_api.rs#impl_PrismApi_PrismHttpClient",
      "target": "trait:PrismApi",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2730",
      "source": "crates/client/src/prism_api.rs#impl_From<PrismHttpClientError>_PrismApiError",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2731",
      "source": "crates/client/src/http_client.rs",
      "target": "serde :: { de :: DeserializeOwned , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2732",
      "source": "crates/client/src/http_client.rs",
      "target": "std :: { error :: Error , fmt :: { Display , Formatter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2733",
      "source": "crates/client/src/http_client.rs#PrismHttpClientError",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2734",
      "source": "crates/client/src/http_client.rs#impl_Display_PrismHttpClientError",
      "target": "trait:Display",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2735",
      "source": "crates/client/src/http_client.rs#impl_Error_PrismHttpClientError",
      "target": "trait:Error",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2736",
      "source": "crates/client/src/http_client.rs#impl_From<reqwest::Error>_PrismHttpClientError",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2737",
      "source": "crates/client/src/http_client.rs#impl_From<url::ParseError>_PrismHttpClientError",
      "target": "trait:From",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2738",
      "source": "crates/storage/src/inmemory.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2739",
      "source": "crates/storage/src/inmemory.rs",
      "target": "jmt :: { KeyHash , OwnedValue , Version , storage :: { LeafNode , Node , NodeBatch , NodeKey , TreeReader , TreeWriter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2740",
      "source": "crates/storage/src/inmemory.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2741",
      "source": "crates/storage/src/inmemory.rs",
      "target": "prism_da :: FinalizedEpoch",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2742",
      "source": "crates/storage/src/inmemory.rs",
      "target": "prism_errors :: DatabaseError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2743",
      "source": "crates/storage/src/inmemory.rs",
      "target": "std :: { collections :: HashMap , sync :: { Arc , Mutex } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2744",
      "source": "crates/storage/src/inmemory.rs",
      "target": "crate :: database :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2745",
      "source": "crates/storage/src/inmemory.rs#impl_Default_InMemoryDatabase",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2746",
      "source": "crates/storage/src/inmemory.rs#impl_TreeReader_InMemoryDatabase",
      "target": "trait:TreeReader",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2747",
      "source": "crates/storage/src/inmemory.rs#impl_TreeWriter_InMemoryDatabase",
      "target": "trait:TreeWriter",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2748",
      "source": "crates/storage/src/inmemory.rs#impl_Database_InMemoryDatabase",
      "target": "trait:Database",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2749",
      "source": "crates/storage/src/database.rs",
      "target": "anyhow :: Result",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2750",
      "source": "crates/storage/src/database.rs",
      "target": "auto_impl :: auto_impl",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2751",
      "source": "crates/storage/src/database.rs",
      "target": "jmt :: storage :: { TreeReader , TreeWriter }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2752",
      "source": "crates/storage/src/database.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2753",
      "source": "crates/storage/src/database.rs",
      "target": "prism_da :: FinalizedEpoch",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2754",
      "source": "crates/storage/src/database.rs",
      "target": "prism_errors :: { DatabaseError , PrismError }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2755",
      "source": "crates/storage/src/database.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2756",
      "source": "crates/storage/src/database.rs#StorageBackend",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2757",
      "source": "crates/storage/src/database.rs#StorageBackend",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2758",
      "source": "crates/storage/src/database.rs#StorageBackend",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2759",
      "source": "crates/storage/src/database.rs#StorageBackend",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2760",
      "source": "crates/storage/src/database.rs#StorageBackend",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2761",
      "source": "crates/storage/src/database.rs#StorageBackend",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2762",
      "source": "crates/storage/src/database.rs#convert_to_connection_error",
      "target": "PrismError::Database",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2763",
      "source": "crates/storage/src/database.rs#convert_to_connection_error",
      "target": "DatabaseError::ConnectionError",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2764",
      "source": "crates/storage/src/database.rs#convert_to_connection_error",
      "target": "to_string",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2765",
      "source": "crates/storage/src/lib.rs",
      "target": "crate :: { database :: Database , redis :: RedisConnection }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2766",
      "source": "crates/storage/src/tests/mod.rs",
      "target": "crate :: rocksdb :: *",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2767",
      "source": "crates/storage/src/tests/mod.rs",
      "target": "tempfile :: TempDir",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2768",
      "source": "crates/storage/src/tests/mod.rs",
      "target": "crate :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2769",
      "source": "crates/storage/src/tests/mod.rs",
      "target": "jmt :: { KeyHash , OwnedValue , Version , storage :: { NodeBatch , TreeReader , TreeWriter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2770",
      "source": "crates/storage/src/tests/mod.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2771",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2772",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "TempDir::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2773",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "RocksDBConfig::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2774",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2775",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "to_str",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2776",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "path",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2777",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2778",
      "source": "crates/storage/src/tests/mod.rs#setup_db",
      "target": "RocksDBConnection::new",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2779",
      "source": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "target": "crates/storage/src/tests/mod.rs#setup_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2780",
      "source": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "target": "crates/common/src/digest.rs#Digest",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2781",
      "source": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2782",
      "source": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "target": "set_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2783",
      "source": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2784",
      "source": "crates/storage/src/tests/mod.rs#test_rw_commitment",
      "target": "crates/node_types/prover/src/webserver.rs#get_commitment",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2785",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "crates/storage/src/tests/mod.rs#setup_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2786",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "KeyHash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2787",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "NodeBatch::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2788",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "insert_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2789",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2790",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2791",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "write_node_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2792",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2793",
      "source": "crates/storage/src/tests/mod.rs#test_write_and_read_value",
      "target": "get_value_option",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2794",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "crates/storage/src/tests/mod.rs#setup_db",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2795",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "KeyHash",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2796",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "NodeBatch::default",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2797",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "insert_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2798",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2799",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "insert_value",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2800",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "clone",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2801",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "unwrap",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2802",
      "source": "crates/storage/src/tests/mod.rs#test_get_value_option_with_multiple_versions",
      "target": "write_node_batch",
      "edge_type": "FunctionCall"
    },
    {
      "@id": "edge_2803",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "std :: sync :: Arc",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2804",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "crate :: Database",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2805",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "anyhow :: { Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2806",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "jmt :: { KeyHash , OwnedValue , Version , storage :: { LeafNode , Node , NodeBatch , NodeKey , TreeReader , TreeWriter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2807",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2808",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "prism_errors :: DatabaseError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2809",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "prism_serde :: { binary :: { FromBinary , ToBinary } , hex :: { FromHex , ToHex } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2810",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "rocksdb :: { DB , DBWithThreadMode , MultiThreaded , Options }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2811",
      "source": "crates/storage/src/rocksdb.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2812",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2813",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2814",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2815",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2816",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2817",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConfig",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2818",
      "source": "crates/storage/src/rocksdb.rs#RocksDBConnection",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2819",
      "source": "crates/storage/src/rocksdb.rs#impl_Database_RocksDBConnection",
      "target": "trait:Database",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2820",
      "source": "crates/storage/src/rocksdb.rs#impl_TreeReader_RocksDBConnection",
      "target": "trait:TreeReader",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2821",
      "source": "crates/storage/src/rocksdb.rs#impl_TreeWriter_RocksDBConnection",
      "target": "trait:TreeWriter",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2822",
      "source": "crates/storage/src/redis.rs",
      "target": "anyhow :: { Result , anyhow }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2823",
      "source": "crates/storage/src/redis.rs",
      "target": "jmt :: { KeyHash , OwnedValue , Version , storage :: { LeafNode , Node , NodeBatch , NodeKey , TreeReader , TreeWriter } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2824",
      "source": "crates/storage/src/redis.rs",
      "target": "prism_common :: digest :: Digest",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2825",
      "source": "crates/storage/src/redis.rs",
      "target": "prism_da :: FinalizedEpoch",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2826",
      "source": "crates/storage/src/redis.rs",
      "target": "prism_serde :: { binary :: { FromBinary , ToBinary } , hex :: { FromHex , ToHex } , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2827",
      "source": "crates/storage/src/redis.rs",
      "target": "redis :: { Client , Commands , Connection }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2828",
      "source": "crates/storage/src/redis.rs",
      "target": "serde :: { Deserialize , Serialize }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2829",
      "source": "crates/storage/src/redis.rs",
      "target": "std :: { self , process :: Command , sync :: { Mutex , MutexGuard } , thread :: sleep , time :: Duration , }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2830",
      "source": "crates/storage/src/redis.rs",
      "target": "prism_errors :: DatabaseError",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2831",
      "source": "crates/storage/src/redis.rs",
      "target": "crate :: database :: { Database , convert_to_connection_error }",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2832",
      "source": "crates/storage/src/redis.rs",
      "target": "tracing :: debug",
      "edge_type": "Import"
    },
    {
      "@id": "edge_2833",
      "source": "crates/storage/src/redis.rs#RedisConfig",
      "target": "trait:Debug",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2834",
      "source": "crates/storage/src/redis.rs#RedisConfig",
      "target": "trait:Serialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2835",
      "source": "crates/storage/src/redis.rs#RedisConfig",
      "target": "trait:Deserialize",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2836",
      "source": "crates/storage/src/redis.rs#RedisConfig",
      "target": "trait:Clone",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2837",
      "source": "crates/storage/src/redis.rs#RedisConfig",
      "target": "trait:PartialEq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2838",
      "source": "crates/storage/src/redis.rs#RedisConfig",
      "target": "trait:Eq",
      "edge_type": "Derive"
    },
    {
      "@id": "edge_2839",
      "source": "crates/storage/src/redis.rs#impl_Default_RedisConfig",
      "target": "trait:Default",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2840",
      "source": "crates/storage/src/redis.rs#impl_TreeReader_RedisConnection",
      "target": "trait:TreeReader",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2841",
      "source": "crates/storage/src/redis.rs#impl_TreeWriter_RedisConnection",
      "target": "trait:TreeWriter",
      "edge_type": "TraitImpl"
    },
    {
      "@id": "edge_2842",
      "source": "crates/storage/src/redis.rs#impl_Database_RedisConnection",
      "target": "trait:Database",
      "edge_type": "TraitImpl"
    }
  ]
}