{
  "@context": {
    "@version": 1.1,
    "@vocab": "https://schema.org/",
    "attributes": "rust:attributes",
    "crate": "https://w3id.org/rust/crate/",
    "crate_name": "name",
    "crate_path": "rust:cratePath",
    "cross_references": "rust:crossReferences",
    "dcterms": "http://purl.org/dc/terms/",
    "derives": "rust:derives",
    "edge_type": "rust:edgeType",
    "edges": "rust:edges",
    "failed_files": "rust:failedFiles",
    "fields": "rust:fields",
    "file_size": "contentSize",
    "files": "hasPart",
    "function_calls": "rust:functionCalls",
    "generics": "rust:generics",
    "items": "hasPart",
    "label": "rdfs:label",
    "last_modified": "dateModified",
    "local_variables": "rust:localVariables",
    "macro_invocations": "rust:macroInvocations",
    "name": "name",
    "nodes": "hasPart",
    "path": "rust:path",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "relative_path": "rust:relativePath",
    "rust": "https://w3id.org/rust/vocab#",
    "source": "rust:source",
    "stats": "rust:statistics",
    "successfully_parsed": "rust:successfullyParsed",
    "target": "rust:target",
    "target_type": "rust:targetType",
    "test_attributes": "rust:testAttributes",
    "total_files": "rust:totalFiles",
    "trait_name": "rust:traitName",
    "type_references": "rust:typeReferences",
    "variants": "rust:variants",
    "visibility": "rust:visibility",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@type": "rust:Crate",
  "@id": "crate:zk_sp1-script",
  "crate_name": "zk_sp1-script",
  "crate_path": "crates/zk/sp1-script",
  "files": [
    {
      "@type": "rust:SourceFile",
      "@id": "crates/zk/sp1-script/src/main.rs",
      "path": "../crates/zk/sp1-script/src/main.rs",
      "relative_path": "crates/zk/sp1-script/src/main.rs",
      "file_size": 35157,
      "last_modified": "2025-06-14 08:09:03 UTC",
      "items": [
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_clap_Parser",
            "path": "clap :: Parser",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_core_panic",
            "path": "core :: panic",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_jmt_mock_MockTreeStore",
            "path": "jmt :: mock :: MockTreeStore",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_plotters_prelude_*",
            "path": "plotters :: prelude :: *",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_prism_common_test_transaction_builder_TestTransactionBuilder",
            "path": "prism_common :: test_transaction_builder :: TestTransactionBuilder",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_prism_keys_{CryptoAlgorithm,SigningKey}",
            "path": "prism_keys :: { CryptoAlgorithm , SigningKey }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_prism_tree_{key_directory_tree_KeyDirectoryTree,proofs_Batch,snarkable_tree_SnarkableTree,}",
            "path": "prism_tree :: { key_directory_tree :: KeyDirectoryTree , proofs :: Batch , snarkable_tree :: SnarkableTree , }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_rand_Rng",
            "path": "rand :: Rng",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_sha2_{Digest,Sha256,Sha512}",
            "path": "sha2 :: { Digest , Sha256 , Sha512 }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_sp1_sdk_{HashableKey,Prover,ProverClient,SP1Proof,SP1Stdin}",
            "path": "sp1_sdk :: { HashableKey , Prover , ProverClient , SP1Proof , SP1Stdin }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_std_{sync_Arc,time_Instant}",
            "path": "std :: { sync :: Arc , time :: Instant }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_tokio_{self,task}",
            "path": "tokio :: { self , task }",
            "visibility": "private"
          }
        },
        {
          "Const": {
            "@type": "rust:Const",
            "@id": "crates/zk/sp1-script/src/main.rs#BASE_PRISM_ELF",
            "name": "BASE_PRISM_ELF",
            "visibility": "pub",
            "type_name": "& [u8]"
          }
        },
        {
          "Const": {
            "@type": "rust:Const",
            "@id": "crates/zk/sp1-script/src/main.rs#RECURSIVE_PRISM_ELF",
            "name": "RECURSIVE_PRISM_ELF",
            "visibility": "pub",
            "type_name": "& [u8]"
          }
        },
        {
          "Struct": {
            "@type": "rust:Struct",
            "@id": "crates/zk/sp1-script/src/main.rs#Args",
            "name": "Args",
            "visibility": "private",
            "fields": [
              {
                "name": "execute",
                "type_name": "bool",
                "visibility": "private"
              },
              {
                "name": "prove",
                "type_name": "bool",
                "visibility": "private"
              },
              {
                "name": "tag",
                "type_name": "Option < String >",
                "visibility": "private"
              }
            ],
            "generics": []
          }
        },
        {
          "Struct": {
            "@type": "rust:Struct",
            "@id": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
            "name": "SimulationConfig",
            "visibility": "private",
            "fields": [
              {
                "name": "tags",
                "type_name": "Vec < String >",
                "visibility": "private"
              },
              {
                "name": "num_simulations",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "algorithms",
                "type_name": "Vec < CryptoAlgorithm >",
                "visibility": "private"
              },
              {
                "name": "num_existing_services",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_existing_accounts",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_new_services",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_new_accounts",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_add_keys",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_revoke_key",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_add_data",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_set_data",
                "type_name": "usize",
                "visibility": "private"
              }
            ],
            "generics": []
          }
        },
        {
          "Impl": {
            "@type": "rust:Impl",
            "@id": "crates/zk/sp1-script/src/main.rs#impl_Default_SimulationConfig",
            "target_type": "SimulationConfig",
            "trait_name": "Default",
            "items": [
              "fn default () -> Self { SimulationConfig { tags : vec ! [] , num_simulations : 1 , algorithms : vec ! [CryptoAlgorithm :: Ed25519 , CryptoAlgorithm :: Secp256k1 , CryptoAlgorithm :: Secp256r1 ,] , num_existing_services : 3 , num_existing_accounts : 100 , num_new_services : 1 , num_new_accounts : 3 , num_add_keys : 3 , num_revoke_key : 1 , num_add_data : 1 , num_set_data : 1 , } }"
            ],
            "generics": []
          }
        },
        {
          "Struct": {
            "@type": "rust:Struct",
            "@id": "crates/zk/sp1-script/src/main.rs#SimulationResult",
            "name": "SimulationResult",
            "visibility": "private",
            "fields": [
              {
                "name": "config",
                "type_name": "SimulationConfig",
                "visibility": "private"
              },
              {
                "name": "min_cycles",
                "type_name": "u64",
                "visibility": "private"
              },
              {
                "name": "max_cycles",
                "type_name": "u64",
                "visibility": "private"
              },
              {
                "name": "avg_cycles",
                "type_name": "f64",
                "visibility": "private"
              },
              {
                "name": "median_cycles",
                "type_name": "u64",
                "visibility": "private"
              },
              {
                "name": "std_dev",
                "type_name": "f64",
                "visibility": "private"
              },
              {
                "name": "std_dev_percentage",
                "type_name": "f64",
                "visibility": "private"
              }
            ],
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
            "name": "get_random_service_id",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "rng : & mut impl Rng",
              "builder : & TestTransactionBuilder"
            ],
            "output": "String",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
            "name": "_get_service_key",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & TestTransactionBuilder",
              "service_id : & str"
            ],
            "output": "SigningKey",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
            "name": "get_random_account_id",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "rng : & mut impl Rng",
              "builder : & TestTransactionBuilder"
            ],
            "output": "String",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
            "name": "get_first_account_key",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & TestTransactionBuilder",
              "account_id : & str"
            ],
            "output": "SigningKey",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
            "name": "create_preparation_batch",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & mut TestTransactionBuilder",
              "tree : & mut KeyDirectoryTree < MockTreeStore >",
              "config : & SimulationConfig"
            ],
            "output": "Batch",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
            "name": "create_benchmark_batch",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & mut TestTransactionBuilder",
              "tree : & mut KeyDirectoryTree < MockTreeStore >",
              "config : & SimulationConfig"
            ],
            "output": "Batch",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#main",
            "name": "main",
            "visibility": "private",
            "is_async": true,
            "is_unsafe": false,
            "inputs": [],
            "output": null,
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
            "name": "execute_simulations",
            "visibility": "private",
            "is_async": true,
            "is_unsafe": false,
            "inputs": [
              "args : Args"
            ],
            "output": null,
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_configurations",
            "name": "get_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "num_simulations : usize",
              "default_config : & SimulationConfig"
            ],
            "output": "Vec < SimulationConfig >",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
            "name": "calculate_statistics",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "cycles_vec : & [u64]",
              "num_simulations : usize"
            ],
            "output": "(u64 , u64 , f64 , u64 , f64 , f64)",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
            "name": "plot_green_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
            "name": "plot_yellow_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
            "name": "plot_blue_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
            "name": "plot_orange_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          }
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
            "name": "plot_orange_configurations_algorithm",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [& SimulationResult]",
              "algorithm : CryptoAlgorithm"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          }
        }
      ],
      "enhanced_items": [
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_clap_Parser",
            "path": "clap :: Parser",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_core_panic",
            "path": "core :: panic",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_jmt_mock_MockTreeStore",
            "path": "jmt :: mock :: MockTreeStore",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_plotters_prelude_*",
            "path": "plotters :: prelude :: *",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_prism_common_test_transaction_builder_TestTransactionBuilder",
            "path": "prism_common :: test_transaction_builder :: TestTransactionBuilder",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_prism_keys_{CryptoAlgorithm,SigningKey}",
            "path": "prism_keys :: { CryptoAlgorithm , SigningKey }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_prism_tree_{key_directory_tree_KeyDirectoryTree,proofs_Batch,snarkable_tree_SnarkableTree,}",
            "path": "prism_tree :: { key_directory_tree :: KeyDirectoryTree , proofs :: Batch , snarkable_tree :: SnarkableTree , }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_rand_Rng",
            "path": "rand :: Rng",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_sha2_{Digest,Sha256,Sha512}",
            "path": "sha2 :: { Digest , Sha256 , Sha512 }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_sp1_sdk_{HashableKey,Prover,ProverClient,SP1Proof,SP1Stdin}",
            "path": "sp1_sdk :: { HashableKey , Prover , ProverClient , SP1Proof , SP1Stdin }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_std_{sync_Arc,time_Instant}",
            "path": "std :: { sync :: Arc , time :: Instant }",
            "visibility": "private"
          }
        },
        {
          "Use": {
            "@type": "rust:Use",
            "@id": "crates/zk/sp1-script/src/main.rs#use_tokio_{self,task}",
            "path": "tokio :: { self , task }",
            "visibility": "private"
          }
        },
        {
          "Const": {
            "@type": "rust:Const",
            "@id": "crates/zk/sp1-script/src/main.rs#BASE_PRISM_ELF",
            "name": "BASE_PRISM_ELF",
            "visibility": "pub",
            "type_name": "& [u8]"
          }
        },
        {
          "Const": {
            "@type": "rust:Const",
            "@id": "crates/zk/sp1-script/src/main.rs#RECURSIVE_PRISM_ELF",
            "name": "RECURSIVE_PRISM_ELF",
            "visibility": "pub",
            "type_name": "& [u8]"
          }
        },
        {
          "Struct": {
            "@type": "rust:Struct",
            "@id": "crates/zk/sp1-script/src/main.rs#Args",
            "name": "Args",
            "visibility": "private",
            "fields": [
              {
                "name": "execute",
                "type_name": "bool",
                "visibility": "private"
              },
              {
                "name": "prove",
                "type_name": "bool",
                "visibility": "private"
              },
              {
                "name": "tag",
                "type_name": "Option < String >",
                "visibility": "private"
              }
            ],
            "generics": []
          },
          "derives": [
            "Parser",
            "Debug"
          ]
        },
        {
          "Struct": {
            "@type": "rust:Struct",
            "@id": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
            "name": "SimulationConfig",
            "visibility": "private",
            "fields": [
              {
                "name": "tags",
                "type_name": "Vec < String >",
                "visibility": "private"
              },
              {
                "name": "num_simulations",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "algorithms",
                "type_name": "Vec < CryptoAlgorithm >",
                "visibility": "private"
              },
              {
                "name": "num_existing_services",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_existing_accounts",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_new_services",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_new_accounts",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_add_keys",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_revoke_key",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_add_data",
                "type_name": "usize",
                "visibility": "private"
              },
              {
                "name": "num_set_data",
                "type_name": "usize",
                "visibility": "private"
              }
            ],
            "generics": []
          },
          "derives": [
            "Debug",
            "Clone"
          ]
        },
        {
          "Impl": {
            "@type": "rust:Impl",
            "@id": "crates/zk/sp1-script/src/main.rs#impl_Default_SimulationConfig",
            "target_type": "SimulationConfig",
            "trait_name": "Default",
            "items": [
              "fn default () -> Self { SimulationConfig { tags : vec ! [] , num_simulations : 1 , algorithms : vec ! [CryptoAlgorithm :: Ed25519 , CryptoAlgorithm :: Secp256k1 , CryptoAlgorithm :: Secp256r1 ,] , num_existing_services : 3 , num_existing_accounts : 100 , num_new_services : 1 , num_new_accounts : 3 , num_add_keys : 3 , num_revoke_key : 1 , num_add_data : 1 , num_set_data : 1 , } }"
            ],
            "generics": []
          },
          "type_references": [
            "SimulationConfig"
          ]
        },
        {
          "Struct": {
            "@type": "rust:Struct",
            "@id": "crates/zk/sp1-script/src/main.rs#SimulationResult",
            "name": "SimulationResult",
            "visibility": "private",
            "fields": [
              {
                "name": "config",
                "type_name": "SimulationConfig",
                "visibility": "private"
              },
              {
                "name": "min_cycles",
                "type_name": "u64",
                "visibility": "private"
              },
              {
                "name": "max_cycles",
                "type_name": "u64",
                "visibility": "private"
              },
              {
                "name": "avg_cycles",
                "type_name": "f64",
                "visibility": "private"
              },
              {
                "name": "median_cycles",
                "type_name": "u64",
                "visibility": "private"
              },
              {
                "name": "std_dev",
                "type_name": "f64",
                "visibility": "private"
              },
              {
                "name": "std_dev_percentage",
                "type_name": "f64",
                "visibility": "private"
              }
            ],
            "generics": []
          },
          "derives": [
            "Debug"
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
            "name": "get_random_service_id",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "rng : & mut impl Rng",
              "builder : & TestTransactionBuilder"
            ],
            "output": "String",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "get_service_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "nth",
              "is_method": true
            },
            {
              "callee": "keys",
              "is_method": true,
              "receiver_type": "service_keys"
            },
            {
              "callee": "gen_range",
              "is_method": true,
              "receiver_type": "rng"
            },
            {
              "callee": "len",
              "is_method": true,
              "receiver_type": "service_keys"
            },
            {
              "callee": "to_string",
              "is_method": true,
              "receiver_type": "service_id"
            }
          ],
          "local_variables": [
            {
              "name": "service_keys",
              "is_mutable": false
            },
            {
              "name": "service_id",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": []
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
            "name": "_get_service_key",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & TestTransactionBuilder",
              "service_id : & str"
            ],
            "output": "SigningKey",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "get_service_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "get",
              "is_method": true,
              "receiver_type": "service_keys"
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "service_key"
            }
          ],
          "local_variables": [
            {
              "name": "service_keys",
              "is_mutable": false
            },
            {
              "name": "service_key",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": []
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
            "name": "get_random_account_id",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "rng : & mut impl Rng",
              "builder : & TestTransactionBuilder"
            ],
            "output": "String",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "get_account_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "nth",
              "is_method": true
            },
            {
              "callee": "keys",
              "is_method": true,
              "receiver_type": "account_keys"
            },
            {
              "callee": "gen_range",
              "is_method": true,
              "receiver_type": "rng"
            },
            {
              "callee": "len",
              "is_method": true,
              "receiver_type": "account_keys"
            },
            {
              "callee": "to_string",
              "is_method": true,
              "receiver_type": "account_id"
            }
          ],
          "local_variables": [
            {
              "name": "account_keys",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": []
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
            "name": "get_first_account_key",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & TestTransactionBuilder",
              "account_id : & str"
            ],
            "output": "SigningKey",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "get_account_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "get",
              "is_method": true,
              "receiver_type": "account_keys_map"
            },
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "first",
              "is_method": true,
              "receiver_type": "account_keys"
            }
          ],
          "local_variables": [
            {
              "name": "account_keys_map",
              "is_mutable": false
            },
            {
              "name": "account_keys",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": []
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
            "name": "create_preparation_batch",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & mut TestTransactionBuilder",
              "tree : & mut KeyDirectoryTree < MockTreeStore >",
              "config : & SimulationConfig"
            ],
            "output": "Batch",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "Vec::with_capacity",
              "is_method": false
            },
            {
              "callee": "rand::thread_rng",
              "is_method": false
            },
            {
              "callee": "len",
              "is_method": true
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "register_service_with_random_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "len",
              "is_method": true
            },
            {
              "callee": "get_random_service_id",
              "is_method": false
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "create_account_with_random_key_signed",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "process_batch",
              "is_method": true,
              "receiver_type": "tree"
            }
          ],
          "local_variables": [
            {
              "name": "transactions",
              "is_mutable": true
            },
            {
              "name": "rng",
              "is_mutable": true
            },
            {
              "name": "algorithm",
              "is_mutable": false
            },
            {
              "name": "service_id",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            },
            {
              "name": "algorithm",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            },
            {
              "name": "service_id",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": [
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "format",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
            "name": "create_benchmark_batch",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "builder : & mut TestTransactionBuilder",
              "tree : & mut KeyDirectoryTree < MockTreeStore >",
              "config : & SimulationConfig"
            ],
            "output": "Batch",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "Vec::new",
              "is_method": false
            },
            {
              "callee": "rand::thread_rng",
              "is_method": false
            },
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "get_service_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "len",
              "is_method": true
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "register_service_with_random_keys",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "len",
              "is_method": true
            },
            {
              "callee": "get_random_service_id",
              "is_method": false
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "create_account_with_random_key_signed",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "len",
              "is_method": true
            },
            {
              "callee": "get_random_account_id",
              "is_method": false
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "add_random_key_verified_with_root",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "get_random_account_id",
              "is_method": false
            },
            {
              "callee": "get_first_account_key",
              "is_method": false
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "revoke_key_verified_with_root",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "into",
              "is_method": true
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "account_key"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "get_random_account_id",
              "is_method": false
            },
            {
              "callee": "to_vec",
              "is_method": true
            },
            {
              "callee": "Sha512::digest",
              "is_method": false
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "add_internally_signed_data_verified_with_root",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "get_random_account_id",
              "is_method": false
            },
            {
              "callee": "to_vec",
              "is_method": true
            },
            {
              "callee": "Sha512::digest",
              "is_method": false
            },
            {
              "callee": "commit",
              "is_method": true
            },
            {
              "callee": "set_internally_signed_data_verified_with_root",
              "is_method": true,
              "receiver_type": "builder"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "transactions"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "process_batch",
              "is_method": true,
              "receiver_type": "tree"
            }
          ],
          "local_variables": [
            {
              "name": "transactions",
              "is_mutable": true
            },
            {
              "name": "rng",
              "is_mutable": true
            },
            {
              "name": "service_keys",
              "is_mutable": false
            },
            {
              "name": "algorithm",
              "is_mutable": false
            },
            {
              "name": "service_id",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            },
            {
              "name": "algorithm",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            },
            {
              "name": "service_id",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            },
            {
              "name": "algorithm",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            },
            {
              "name": "account_key",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            },
            {
              "name": "data",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            },
            {
              "name": "account_id",
              "is_mutable": false
            },
            {
              "name": "data",
              "is_mutable": false
            },
            {
              "name": "transaction",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": [
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "format",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#main",
            "name": "main",
            "visibility": "private",
            "is_async": true,
            "is_unsafe": false,
            "inputs": [],
            "output": null,
            "generics": []
          },
          "function_calls": [
            {
              "callee": "sp1_sdk::utils::setup_logger",
              "is_method": false
            },
            {
              "callee": "Args::parse",
              "is_method": false
            },
            {
              "callee": "std::process::exit",
              "is_method": false
            },
            {
              "callee": "execute_simulations",
              "is_method": false
            },
            {
              "callee": "build",
              "is_method": true
            },
            {
              "callee": "cuda",
              "is_method": true
            },
            {
              "callee": "ProverClient::builder",
              "is_method": false
            },
            {
              "callee": "SP1Stdin::new",
              "is_method": false
            },
            {
              "callee": "TestTransactionBuilder::new",
              "is_method": false
            },
            {
              "callee": "KeyDirectoryTree::new",
              "is_method": false
            },
            {
              "callee": "Arc::new",
              "is_method": false
            },
            {
              "callee": "MockTreeStore::default",
              "is_method": false
            },
            {
              "callee": "create_benchmark_batch",
              "is_method": false
            },
            {
              "callee": "write",
              "is_method": true,
              "receiver_type": "stdin_base"
            },
            {
              "callee": "setup",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "Instant::now",
              "is_method": false
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "run",
              "is_method": true
            },
            {
              "callee": "compressed",
              "is_method": true
            },
            {
              "callee": "prove",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "run",
              "is_method": true
            },
            {
              "callee": "groth16",
              "is_method": true
            },
            {
              "callee": "prove",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "elapsed",
              "is_method": true,
              "receiver_type": "start"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "verify",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "verify",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "SP1Stdin::new",
              "is_method": false
            },
            {
              "callee": "clone",
              "is_method": true
            },
            {
              "callee": "hash_u32",
              "is_method": true,
              "receiver_type": "base_vk"
            },
            {
              "callee": "write_proof",
              "is_method": true,
              "receiver_type": "stdin_recursive"
            },
            {
              "callee": "write_vec",
              "is_method": true,
              "receiver_type": "stdin_recursive"
            },
            {
              "callee": "to_vec",
              "is_method": true,
              "receiver_type": "public_values"
            },
            {
              "callee": "write",
              "is_method": true,
              "receiver_type": "stdin_recursive"
            },
            {
              "callee": "create_benchmark_batch",
              "is_method": false
            },
            {
              "callee": "std::process::exit",
              "is_method": false
            },
            {
              "callee": "write",
              "is_method": true,
              "receiver_type": "stdin_recursive"
            },
            {
              "callee": "setup",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "Instant::now",
              "is_method": false
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "run",
              "is_method": true
            },
            {
              "callee": "compressed",
              "is_method": true
            },
            {
              "callee": "prove",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "run",
              "is_method": true
            },
            {
              "callee": "groth16",
              "is_method": true
            },
            {
              "callee": "prove",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "elapsed",
              "is_method": true,
              "receiver_type": "start"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "verify",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "verify",
              "is_method": true,
              "receiver_type": "client"
            }
          ],
          "local_variables": [
            {
              "name": "args",
              "is_mutable": false
            },
            {
              "name": "client",
              "is_mutable": false
            },
            {
              "name": "stdin_base",
              "is_mutable": true
            },
            {
              "name": "builder",
              "is_mutable": true
            },
            {
              "name": "tree",
              "is_mutable": true
            },
            {
              "name": "config",
              "is_mutable": false
            },
            {
              "name": "base_batch",
              "is_mutable": false
            },
            {
              "name": "start",
              "is_mutable": false
            },
            {
              "name": "base_compressed_proof",
              "is_mutable": false
            },
            {
              "name": "base_proof",
              "is_mutable": false
            },
            {
              "name": "duration",
              "is_mutable": false
            },
            {
              "name": "stdin_recursive",
              "is_mutable": true
            },
            {
              "name": "public_values",
              "is_mutable": false
            },
            {
              "name": "vkey_hash",
              "is_mutable": false
            },
            {
              "name": "recursive_config",
              "is_mutable": false
            },
            {
              "name": "recursive_batch",
              "is_mutable": false
            },
            {
              "name": "start",
              "is_mutable": false
            },
            {
              "name": "compressed_recursive_proof",
              "is_mutable": false
            },
            {
              "name": "recursive_proof",
              "is_mutable": false
            },
            {
              "name": "duration",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": [
            {
              "name": "eprintln",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "panic",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "eprintln",
              "kind": "function-like"
            },
            {
              "name": "eprintln",
              "kind": "function-like"
            },
            {
              "name": "eprintln",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
            "name": "execute_simulations",
            "visibility": "private",
            "is_async": true,
            "is_unsafe": false,
            "inputs": [
              "args : Args"
            ],
            "output": null,
            "generics": []
          },
          "function_calls": [
            {
              "callee": "SimulationConfig::default",
              "is_method": false
            },
            {
              "callee": "get_configurations",
              "is_method": false
            },
            {
              "callee": "Vec::new",
              "is_method": false
            },
            {
              "callee": "contains",
              "is_method": true
            },
            {
              "callee": "Vec::new",
              "is_method": false
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "config"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "tasks"
            },
            {
              "callee": "task::spawn",
              "is_method": false
            },
            {
              "callee": "ProverClient::from_env",
              "is_method": false
            },
            {
              "callee": "TestTransactionBuilder::new",
              "is_method": false
            },
            {
              "callee": "KeyDirectoryTree::new",
              "is_method": false
            },
            {
              "callee": "Arc::new",
              "is_method": false
            },
            {
              "callee": "MockTreeStore::default",
              "is_method": false
            },
            {
              "callee": "create_preparation_batch",
              "is_method": false
            },
            {
              "callee": "SP1Stdin::new",
              "is_method": false
            },
            {
              "callee": "write",
              "is_method": true,
              "receiver_type": "stdin"
            },
            {
              "callee": "create_benchmark_batch",
              "is_method": false
            },
            {
              "callee": "SP1Stdin::new",
              "is_method": false
            },
            {
              "callee": "write",
              "is_method": true,
              "receiver_type": "stdin"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "task::spawn_blocking",
              "is_method": false
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "run",
              "is_method": true
            },
            {
              "callee": "execute",
              "is_method": true,
              "receiver_type": "client"
            },
            {
              "callee": "total_instruction_count",
              "is_method": true,
              "receiver_type": "report"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "into_iter",
              "is_method": true
            },
            {
              "callee": "futures::future::join_all",
              "is_method": false
            },
            {
              "callee": "unwrap",
              "is_method": true,
              "receiver_type": "res"
            },
            {
              "callee": "calculate_statistics",
              "is_method": false
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "results"
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "config"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "plot_green_configurations",
              "is_method": false
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "plot_yellow_configurations",
              "is_method": false
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "plot_blue_configurations",
              "is_method": false
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "plot_orange_configurations",
              "is_method": false
            }
          ],
          "local_variables": [
            {
              "name": "num_simulations",
              "is_mutable": false
            },
            {
              "name": "default_config",
              "is_mutable": false
            },
            {
              "name": "configurations",
              "is_mutable": false
            },
            {
              "name": "results",
              "is_mutable": true
            },
            {
              "name": "tasks",
              "is_mutable": true
            },
            {
              "name": "config",
              "is_mutable": false
            },
            {
              "name": "client",
              "is_mutable": false
            },
            {
              "name": "builder",
              "is_mutable": true
            },
            {
              "name": "tree",
              "is_mutable": true
            },
            {
              "name": "initial_batch",
              "is_mutable": false
            },
            {
              "name": "stdin",
              "is_mutable": true
            },
            {
              "name": "operations_batch",
              "is_mutable": false
            },
            {
              "name": "stdin",
              "is_mutable": true
            }
          ],
          "type_references": [
            "Vec",
            "u64"
          ],
          "macro_invocations": [
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#get_configurations",
            "name": "get_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "num_simulations : usize",
              "default_config : & SimulationConfig"
            ],
            "output": "Vec < SimulationConfig >",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "Vec::new",
              "is_method": false
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "configs"
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "default_config"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "configs"
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "default_config"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "configs"
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "default_config"
            },
            {
              "callee": "push",
              "is_method": true,
              "receiver_type": "configs"
            },
            {
              "callee": "clone",
              "is_method": true,
              "receiver_type": "default_config"
            }
          ],
          "local_variables": [
            {
              "name": "configs",
              "is_mutable": true
            },
            {
              "name": "green_configs",
              "is_mutable": false
            },
            {
              "name": "yellow_algorithms",
              "is_mutable": false
            },
            {
              "name": "blue_configs",
              "is_mutable": false
            },
            {
              "name": "orange_algorithms",
              "is_mutable": false
            },
            {
              "name": "orange_configs",
              "is_mutable": false
            }
          ],
          "type_references": [],
          "macro_invocations": [
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
            "name": "calculate_statistics",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "cycles_vec : & [u64]",
              "num_simulations : usize"
            ],
            "output": "(u64 , u64 , f64 , u64 , f64 , f64)",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "min",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "cycles_vec"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "max",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "cycles_vec"
            },
            {
              "callee": "sum",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "cycles_vec"
            },
            {
              "callee": "to_owned",
              "is_method": true,
              "receiver_type": "cycles_vec"
            },
            {
              "callee": "sort",
              "is_method": true,
              "receiver_type": "sorted"
            },
            {
              "callee": "sum",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "cycles_vec"
            },
            {
              "callee": "powi",
              "is_method": true
            },
            {
              "callee": "sqrt",
              "is_method": true,
              "receiver_type": "variance"
            }
          ],
          "local_variables": [
            {
              "name": "min_cycles",
              "is_mutable": false
            },
            {
              "name": "max_cycles",
              "is_mutable": false
            },
            {
              "name": "avg_cycles",
              "is_mutable": false
            },
            {
              "name": "median_cycles",
              "is_mutable": false
            },
            {
              "name": "sorted",
              "is_mutable": true
            },
            {
              "name": "std_dev",
              "is_mutable": false
            },
            {
              "name": "variance",
              "is_mutable": false
            },
            {
              "name": "std_dev_percentage",
              "is_mutable": false
            }
          ],
          "type_references": [
            "f64",
            "u64"
          ],
          "macro_invocations": []
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
            "name": "plot_green_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "filter",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "results"
            },
            {
              "callee": "contains",
              "is_method": true
            },
            {
              "callee": "to_string",
              "is_method": true
            },
            {
              "callee": "is_empty",
              "is_method": true,
              "receiver_type": "green_results"
            },
            {
              "callee": "Ok",
              "is_method": false
            },
            {
              "callee": "into_drawing_area",
              "is_method": true
            },
            {
              "callee": "BitMapBackend::new",
              "is_method": false
            },
            {
              "callee": "fill",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "green_results"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "green_results"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "green_results"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "green_results"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "min",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "min_cycles"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "max",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "max_cycles"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "min",
              "is_method": true
            },
            {
              "callee": "cloned",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "num_existing_accounts"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "max",
              "is_method": true
            },
            {
              "callee": "cloned",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "num_existing_accounts"
            },
            {
              "callee": "build_cartesian_2d",
              "is_method": true
            },
            {
              "callee": "y_label_area_size",
              "is_method": true
            },
            {
              "callee": "x_label_area_size",
              "is_method": true
            },
            {
              "callee": "margin",
              "is_method": true
            },
            {
              "callee": "caption",
              "is_method": true
            },
            {
              "callee": "ChartBuilder::on",
              "is_method": false
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "y_label_formatter",
              "is_method": true
            },
            {
              "callee": "y_desc",
              "is_method": true
            },
            {
              "callee": "x_label_style",
              "is_method": true
            },
            {
              "callee": "x_label_formatter",
              "is_method": true
            },
            {
              "callee": "x_desc",
              "is_method": true
            },
            {
              "callee": "configure_mesh",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "legend",
              "is_method": true
            },
            {
              "callee": "label",
              "is_method": true
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "LineSeries::new",
              "is_method": false
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "zip",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "num_existing_accounts"
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "PathElement::new",
              "is_method": false
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "zip",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "num_existing_accounts"
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "Circle::new",
              "is_method": false
            },
            {
              "callee": "filled",
              "is_method": true,
              "receiver_type": "BLACK"
            },
            {
              "callee": "legend",
              "is_method": true
            },
            {
              "callee": "label",
              "is_method": true
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "LineSeries::new",
              "is_method": false
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "zip",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "num_existing_accounts"
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "min_cycles"
            },
            {
              "callee": "PathElement::new",
              "is_method": false
            },
            {
              "callee": "legend",
              "is_method": true
            },
            {
              "callee": "label",
              "is_method": true
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "LineSeries::new",
              "is_method": false
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "zip",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "num_existing_accounts"
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "max_cycles"
            },
            {
              "callee": "PathElement::new",
              "is_method": false
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "position",
              "is_method": true
            },
            {
              "callee": "border_style",
              "is_method": true
            },
            {
              "callee": "background_style",
              "is_method": true
            },
            {
              "callee": "configure_series_labels",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "WHITE"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "present",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "Ok",
              "is_method": false
            }
          ],
          "local_variables": [
            {
              "name": "root_area",
              "is_mutable": false
            },
            {
              "name": "y_min",
              "is_mutable": false
            },
            {
              "name": "y_max",
              "is_mutable": false
            },
            {
              "name": "x_min",
              "is_mutable": false
            },
            {
              "name": "x_max",
              "is_mutable": false
            },
            {
              "name": "y_min_adjusted",
              "is_mutable": false
            },
            {
              "name": "y_max_adjusted",
              "is_mutable": false
            },
            {
              "name": "x_min_adjusted",
              "is_mutable": false
            },
            {
              "name": "x_max_adjusted",
              "is_mutable": false
            },
            {
              "name": "chart",
              "is_mutable": true
            }
          ],
          "type_references": [
            "u64",
            "u32",
            "Vec",
            "SimulationResult",
            "f64"
          ],
          "macro_invocations": [
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
            "name": "plot_yellow_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "filter",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "results"
            },
            {
              "callee": "contains",
              "is_method": true
            },
            {
              "callee": "to_string",
              "is_method": true
            },
            {
              "callee": "is_empty",
              "is_method": true,
              "receiver_type": "yellow_results"
            },
            {
              "callee": "Ok",
              "is_method": false
            },
            {
              "callee": "into_drawing_area",
              "is_method": true
            },
            {
              "callee": "BitMapBackend::new",
              "is_method": false
            },
            {
              "callee": "fill",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "yellow_results"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "first",
              "is_method": true
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "yellow_results"
            },
            {
              "callee": "fold",
              "is_method": true
            },
            {
              "callee": "cloned",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "len",
              "is_method": true,
              "receiver_type": "algorithms"
            },
            {
              "callee": "build_cartesian_2d",
              "is_method": true
            },
            {
              "callee": "y_label_area_size",
              "is_method": true
            },
            {
              "callee": "x_label_area_size",
              "is_method": true
            },
            {
              "callee": "margin",
              "is_method": true
            },
            {
              "callee": "caption",
              "is_method": true
            },
            {
              "callee": "ChartBuilder::on",
              "is_method": false
            },
            {
              "callee": "into_segmented",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "y_label_formatter",
              "is_method": true
            },
            {
              "callee": "y_desc",
              "is_method": true
            },
            {
              "callee": "x_label_formatter",
              "is_method": true
            },
            {
              "callee": "x_labels",
              "is_method": true
            },
            {
              "callee": "x_desc",
              "is_method": true
            },
            {
              "callee": "configure_mesh",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "len",
              "is_method": true,
              "receiver_type": "algorithms"
            },
            {
              "callee": "to_string",
              "is_method": true
            },
            {
              "callee": "legend",
              "is_method": true
            },
            {
              "callee": "label",
              "is_method": true
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "data",
              "is_method": true
            },
            {
              "callee": "style",
              "is_method": true
            },
            {
              "callee": "Histogram::vertical",
              "is_method": false
            },
            {
              "callee": "filled",
              "is_method": true
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "BLUE"
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "enumerate",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "PathElement::new",
              "is_method": false
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "position",
              "is_method": true
            },
            {
              "callee": "border_style",
              "is_method": true
            },
            {
              "callee": "background_style",
              "is_method": true
            },
            {
              "callee": "configure_series_labels",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "WHITE"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "present",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "Ok",
              "is_method": false
            }
          ],
          "local_variables": [
            {
              "name": "root_area",
              "is_mutable": false
            },
            {
              "name": "y_min",
              "is_mutable": false
            },
            {
              "name": "y_max",
              "is_mutable": false
            },
            {
              "name": "x_min",
              "is_mutable": false
            },
            {
              "name": "x_max",
              "is_mutable": false
            },
            {
              "name": "y_max_adjusted",
              "is_mutable": false
            },
            {
              "name": "chart",
              "is_mutable": true
            },
            {
              "name": "index",
              "is_mutable": false
            }
          ],
          "type_references": [
            "f64",
            "usize",
            "SimulationResult",
            "Vec",
            "CryptoAlgorithm",
            "u32"
          ],
          "macro_invocations": [
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
            "name": "plot_blue_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "filter",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "results"
            },
            {
              "callee": "contains",
              "is_method": true
            },
            {
              "callee": "to_string",
              "is_method": true
            },
            {
              "callee": "is_empty",
              "is_method": true,
              "receiver_type": "blue_results"
            },
            {
              "callee": "Ok",
              "is_method": false
            },
            {
              "callee": "into_drawing_area",
              "is_method": true
            },
            {
              "callee": "BitMapBackend::new",
              "is_method": false
            },
            {
              "callee": "fill",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "blue_results"
            },
            {
              "callee": "len",
              "is_method": true,
              "receiver_type": "blue_results"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "max",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "build_cartesian_2d",
              "is_method": true
            },
            {
              "callee": "y_label_area_size",
              "is_method": true
            },
            {
              "callee": "x_label_area_size",
              "is_method": true
            },
            {
              "callee": "margin",
              "is_method": true
            },
            {
              "callee": "caption",
              "is_method": true
            },
            {
              "callee": "ChartBuilder::on",
              "is_method": false
            },
            {
              "callee": "into_segmented",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "y_label_formatter",
              "is_method": true
            },
            {
              "callee": "y_desc",
              "is_method": true
            },
            {
              "callee": "x_label_formatter",
              "is_method": true
            },
            {
              "callee": "x_desc",
              "is_method": true
            },
            {
              "callee": "configure_mesh",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "get",
              "is_method": true,
              "receiver_type": "blue_results"
            },
            {
              "callee": "to_string",
              "is_method": true,
              "receiver_type": "operation"
            },
            {
              "callee": "legend",
              "is_method": true
            },
            {
              "callee": "label",
              "is_method": true
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "data",
              "is_method": true
            },
            {
              "callee": "style",
              "is_method": true
            },
            {
              "callee": "Histogram::vertical",
              "is_method": false
            },
            {
              "callee": "filled",
              "is_method": true
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "BLUE"
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "enumerate",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "PathElement::new",
              "is_method": false
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "position",
              "is_method": true
            },
            {
              "callee": "border_style",
              "is_method": true
            },
            {
              "callee": "background_style",
              "is_method": true
            },
            {
              "callee": "configure_series_labels",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "WHITE"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "present",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "Ok",
              "is_method": false
            }
          ],
          "local_variables": [
            {
              "name": "root_area",
              "is_mutable": false
            },
            {
              "name": "avg_cycles",
              "is_mutable": false
            },
            {
              "name": "x_min",
              "is_mutable": false
            },
            {
              "name": "x_max",
              "is_mutable": false
            },
            {
              "name": "y_min",
              "is_mutable": false
            },
            {
              "name": "y_max",
              "is_mutable": false
            },
            {
              "name": "y_max_adjusted",
              "is_mutable": false
            },
            {
              "name": "chart",
              "is_mutable": true
            },
            {
              "name": "index",
              "is_mutable": false
            },
            {
              "name": "operation",
              "is_mutable": false
            }
          ],
          "type_references": [
            "u64",
            "Vec",
            "f64",
            "SimulationResult",
            "u32",
            "usize"
          ],
          "macro_invocations": [
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            }
          ]
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
            "name": "plot_orange_configurations",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [SimulationResult]"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "filter",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "results"
            },
            {
              "callee": "contains",
              "is_method": true
            },
            {
              "callee": "to_string",
              "is_method": true
            },
            {
              "callee": "plot_orange_configurations_algorithm",
              "is_method": false
            },
            {
              "callee": "Ok",
              "is_method": false
            }
          ],
          "local_variables": [],
          "type_references": [
            "SimulationResult",
            "Vec"
          ],
          "macro_invocations": []
        },
        {
          "Function": {
            "@type": "rust:Function",
            "@id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
            "name": "plot_orange_configurations_algorithm",
            "visibility": "private",
            "is_async": false,
            "is_unsafe": false,
            "inputs": [
              "results : & [& SimulationResult]",
              "algorithm : CryptoAlgorithm"
            ],
            "output": "Result < () , Box < dyn std :: error :: Error > >",
            "generics": []
          },
          "function_calls": [
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "cloned",
              "is_method": true
            },
            {
              "callee": "filter",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "results"
            },
            {
              "callee": "contains",
              "is_method": true
            },
            {
              "callee": "is_empty",
              "is_method": true,
              "receiver_type": "algorithm_results"
            },
            {
              "callee": "Ok",
              "is_method": false
            },
            {
              "callee": "into_drawing_area",
              "is_method": true
            },
            {
              "callee": "BitMapBackend::new",
              "is_method": false
            },
            {
              "callee": "fill",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "collect",
              "is_method": true
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "algorithm_results"
            },
            {
              "callee": "len",
              "is_method": true,
              "receiver_type": "algorithm_results"
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "max",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "build_cartesian_2d",
              "is_method": true
            },
            {
              "callee": "y_label_area_size",
              "is_method": true
            },
            {
              "callee": "x_label_area_size",
              "is_method": true
            },
            {
              "callee": "margin",
              "is_method": true
            },
            {
              "callee": "caption",
              "is_method": true
            },
            {
              "callee": "ChartBuilder::on",
              "is_method": false
            },
            {
              "callee": "into_segmented",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "y_label_formatter",
              "is_method": true
            },
            {
              "callee": "y_desc",
              "is_method": true
            },
            {
              "callee": "x_label_formatter",
              "is_method": true
            },
            {
              "callee": "x_desc",
              "is_method": true
            },
            {
              "callee": "configure_mesh",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "get",
              "is_method": true,
              "receiver_type": "algorithm_results"
            },
            {
              "callee": "to_string",
              "is_method": true,
              "receiver_type": "operation"
            },
            {
              "callee": "legend",
              "is_method": true
            },
            {
              "callee": "label",
              "is_method": true
            },
            {
              "callee": "draw_series",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "data",
              "is_method": true
            },
            {
              "callee": "style",
              "is_method": true
            },
            {
              "callee": "Histogram::vertical",
              "is_method": false
            },
            {
              "callee": "filled",
              "is_method": true
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "BLUE"
            },
            {
              "callee": "map",
              "is_method": true
            },
            {
              "callee": "enumerate",
              "is_method": true
            },
            {
              "callee": "iter",
              "is_method": true,
              "receiver_type": "avg_cycles"
            },
            {
              "callee": "PathElement::new",
              "is_method": false
            },
            {
              "callee": "unwrap",
              "is_method": true
            },
            {
              "callee": "draw",
              "is_method": true
            },
            {
              "callee": "position",
              "is_method": true
            },
            {
              "callee": "border_style",
              "is_method": true
            },
            {
              "callee": "background_style",
              "is_method": true
            },
            {
              "callee": "configure_series_labels",
              "is_method": true,
              "receiver_type": "chart"
            },
            {
              "callee": "mix",
              "is_method": true,
              "receiver_type": "WHITE"
            },
            {
              "callee": "expect",
              "is_method": true
            },
            {
              "callee": "present",
              "is_method": true,
              "receiver_type": "root_area"
            },
            {
              "callee": "Ok",
              "is_method": false
            }
          ],
          "local_variables": [
            {
              "name": "file_name",
              "is_mutable": false
            },
            {
              "name": "root_area",
              "is_mutable": false
            },
            {
              "name": "avg_cycles",
              "is_mutable": false
            },
            {
              "name": "x_min",
              "is_mutable": false
            },
            {
              "name": "x_max",
              "is_mutable": false
            },
            {
              "name": "y_min",
              "is_mutable": false
            },
            {
              "name": "y_max",
              "is_mutable": false
            },
            {
              "name": "y_max_adjusted",
              "is_mutable": false
            },
            {
              "name": "chart",
              "is_mutable": true
            },
            {
              "name": "index",
              "is_mutable": false
            },
            {
              "name": "operation",
              "is_mutable": false
            }
          ],
          "type_references": [
            "f64",
            "SimulationResult",
            "u64",
            "u32",
            "Vec",
            "usize"
          ],
          "macro_invocations": [
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "format",
              "kind": "function-like"
            },
            {
              "name": "vec",
              "kind": "function-like"
            },
            {
              "name": "println",
              "kind": "function-like"
            }
          ]
        }
      ]
    }
  ],
  "cross_references": [
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "clap :: Parser",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "core :: panic",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "jmt :: mock :: MockTreeStore",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "plotters :: prelude :: *",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "prism_common :: test_transaction_builder :: TestTransactionBuilder",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "prism_keys :: { CryptoAlgorithm , SigningKey }",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "prism_tree :: { key_directory_tree :: KeyDirectoryTree , proofs :: Batch , snarkable_tree :: SnarkableTree , }",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "rand :: Rng",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "sha2 :: { Digest , Sha256 , Sha512 }",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "sp1_sdk :: { HashableKey , Prover , ProverClient , SP1Proof , SP1Stdin }",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "std :: { sync :: Arc , time :: Instant }",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs",
      "to_id": "tokio :: { self , task }",
      "ref_type": "Import"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#Args",
      "to_id": "trait:Parser",
      "ref_type": "Derive"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#Args",
      "to_id": "trait:Debug",
      "ref_type": "Derive"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
      "to_id": "trait:Debug",
      "ref_type": "Derive"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#SimulationConfig",
      "to_id": "trait:Clone",
      "ref_type": "Derive"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#impl_Default_SimulationConfig",
      "to_id": "trait:Default",
      "ref_type": "TraitImpl"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#SimulationResult",
      "to_id": "trait:Debug",
      "ref_type": "Derive"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "get_service_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "nth",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "gen_range",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "to_id": "get_service_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "to_id": "get",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#_get_service_key",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "get_account_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "nth",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "gen_range",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "get_account_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "get",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "to_id": "first",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "Vec::with_capacity",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "rand::thread_rng",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "register_service_with_random_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "create_account_with_random_key_signed",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "to_id": "process_batch",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "Vec::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "rand::thread_rng",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "get_service_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "register_service_with_random_keys",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_random_service_id",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "create_account_with_random_key_signed",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "add_random_key_verified_with_root",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_first_account_key",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "revoke_key_verified_with_root",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "into",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "to_vec",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "Sha512::digest",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "add_internally_signed_data_verified_with_root",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_random_account_id",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "to_vec",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "Sha512::digest",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "commit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "set_internally_signed_data_verified_with_root",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "to_id": "process_batch",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "sp1_sdk::utils::setup_logger",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "Args::parse",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "std::process::exit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "build",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "cuda",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "ProverClient::builder",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "SP1Stdin::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "TestTransactionBuilder::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "KeyDirectoryTree::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "Arc::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "MockTreeStore::default",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "write",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "setup",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "Instant::now",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "run",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "compressed",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "prove",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "run",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "groth16",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "prove",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "elapsed",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "verify",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "verify",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "SP1Stdin::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "hash_u32",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "write_proof",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "write_vec",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "to_vec",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "write",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "std::process::exit",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "write",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "setup",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "Instant::now",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "run",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "compressed",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "prove",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "run",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "groth16",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "prove",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "elapsed",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "verify",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#main",
      "to_id": "verify",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "SimulationConfig::default",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "Vec::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "contains",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "Vec::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "task::spawn",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "ProverClient::from_env",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "TestTransactionBuilder::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "KeyDirectoryTree::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "Arc::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "MockTreeStore::default",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#create_preparation_batch",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "SP1Stdin::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "write",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#create_benchmark_batch",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "SP1Stdin::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "write",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "task::spawn_blocking",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "run",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "execute",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "total_instruction_count",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "into_iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "futures::future::join_all",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#execute_simulations",
      "to_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "Vec::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "push",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#get_configurations",
      "to_id": "clone",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "min",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "max",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "sum",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "to_owned",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "sort",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "sum",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "powi",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#calculate_statistics",
      "to_id": "sqrt",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "filter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "contains",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "is_empty",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "into_drawing_area",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "BitMapBackend::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "fill",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "min",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "max",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "min",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "cloned",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "max",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "cloned",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "build_cartesian_2d",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "y_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "x_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "margin",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "caption",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "ChartBuilder::on",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "y_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "y_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "x_label_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "x_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "x_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "configure_mesh",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "legend",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "label",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "LineSeries::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "zip",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "PathElement::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "zip",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "Circle::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "filled",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "legend",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "label",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "LineSeries::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "zip",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "PathElement::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "legend",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "label",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "LineSeries::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "zip",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "PathElement::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "position",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "border_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "background_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "configure_series_labels",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "present",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_green_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "filter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "contains",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "is_empty",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "into_drawing_area",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "BitMapBackend::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "fill",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "first",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "fold",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "cloned",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "build_cartesian_2d",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "y_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "x_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "margin",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "caption",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "ChartBuilder::on",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "into_segmented",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "y_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "y_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "x_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "x_labels",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "x_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "configure_mesh",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "legend",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "label",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "data",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "Histogram::vertical",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "filled",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "enumerate",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "PathElement::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "position",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "border_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "background_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "configure_series_labels",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "present",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_yellow_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "filter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "contains",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "is_empty",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "into_drawing_area",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "BitMapBackend::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "fill",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "max",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "build_cartesian_2d",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "y_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "x_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "margin",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "caption",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "ChartBuilder::on",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "into_segmented",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "y_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "y_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "x_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "x_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "configure_mesh",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "get",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "legend",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "label",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "data",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "Histogram::vertical",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "filled",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "enumerate",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "PathElement::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "position",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "border_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "background_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "configure_series_labels",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "present",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_blue_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "filter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "contains",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "cloned",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "filter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "contains",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "is_empty",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "into_drawing_area",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "BitMapBackend::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "fill",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "collect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "len",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "max",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "build_cartesian_2d",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "y_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "x_label_area_size",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "margin",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "caption",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "ChartBuilder::on",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "into_segmented",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "y_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "y_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "x_label_formatter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "x_desc",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "configure_mesh",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "get",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "to_string",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "legend",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "label",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "draw_series",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "data",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "Histogram::vertical",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "filled",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "map",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "enumerate",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "iter",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "PathElement::new",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "unwrap",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "draw",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "position",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "border_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "background_style",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "configure_series_labels",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "mix",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "expect",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "present",
      "ref_type": "FunctionCall"
    },
    {
      "from_id": "crates/zk/sp1-script/src/main.rs#plot_orange_configurations_algorithm",
      "to_id": "Ok",
      "ref_type": "FunctionCall"
    }
  ],
  "total_files": 1,
  "successfully_parsed": 1,
  "failed_files": [],
  "stats": {
    "total_functions": 15,
    "total_structs": 3,
    "total_enums": 0,
    "total_traits": 0,
    "total_impls": 1,
    "total_tests": 0,
    "total_function_calls": 470,
    "total_derives": 5,
    "total_macro_uses": 64
  }
}